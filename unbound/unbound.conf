# unbound.conf
server:
  verbosity: {{ settings.verbosity }}

  # Do not query the following addresses. No DNS queries are sent there.
	# List one address per entry. List classless netblocks with /size,
	# do-not-query-address: 127.0.0.1/8
	# do-not-query-address: ::1
	# if yes, the above default do-not-query-address entries are present.
	# if no, localhost can be queried (for testing and debugging).
	# do-not-query-localhost: yes
  do-not-query-localhost: {{ "yes" if not settings.query_localhost else "no" }}

  # Use 0x20-encoded random bits in the query to foil spoof attempts.
	# This feature is an experimental implementation of draft dns-0x20.
  use-caps-for-id: yes

  # RFC 6891. Number of bytes size to advertise as the EDNS reassembly buffer
  # size. This is the value put into  datagrams over UDP towards peers.
  # The actual buffer size is determined by msg-buffer-size (both for TCP and
  # UDP). Do not set higher than that value.
  # Default  is  1232 which is the DNS Flag Day 2020 recommendation.
  edns-buffer-size: 1232

  # RFC 8198. Use the DNSSEC NSEC chain to synthesize NXDO-MAIN and other
  # denials, using information from previous NXDO-MAINs answers. In other
  # words, use cached NSEC records to generate negative answers within a
  # range and positive answers from wildcards. This increases performance,
  # decreases latency and resource utilization on both authoritative and
  # recursive servers, and increases privacy. Also, it may help increase
  # resilience to certain DoS attacks in some circumstances.
  aggressive-nsec: yes

  # Sent minimum amount of information to upstream servers to enhance
	# privacy. Only sent minimum required labels of the QNAME and set QTYPE
	# to A when possible.
	qname-minimisation: yes

  # enable to not answer id.server and hostname.bind queries.
	hide-identity: yes
  # Report this identity rather than the hostname of the server.
  identity: "DNS"

  # below settings are redundant to the defaults (yes) for safety
  # Harden against algorithm downgrade when multiple algorithms are
  # advertised in the DS record.
  harden-algo-downgrade: yes
  # RFC 8020. returns nxdomain to queries for a name below another name that
  # is already known to be nxdomain.
  harden-below-nxdomain: yes
  # Require DNSSEC data for trust-anchored zones, if such data is absent, the
  # zone becomes bogus. If turned off you run the risk of a downgrade attack
  # that disables security for a zone.
  harden-dnssec-stripped: yes
  # Only trust glue if it is within the servers authority.
  harden-glue: yes

  # specify the interfaces to answer queries from by ip-address.
  # The default is to listen to localhost (127.0.0.1 and ::1).
  # specify 0.0.0.0 and ::0 to bind to all available interfaces.
  # specify every interface[@port] on a new 'interface:' labelled line.
  # The listen interfaces are not changed on reload, only on restart.
{%- for l in settings.listen %}
  interface: {{ l }}
{%- endfor %}

  # control which clients are allowed to make (recursive) queries
  # to this server. Specify classless netblocks with /size and action.
  # By default everything is refused, except for localhost.
  # Choose deny (drop message), refuse (polite error reply),
  # allow (recursive ok), allow_setrd (recursive ok, rd bit is forced on),
  # allow_snoop (recursive and nonrecursive ok)
  # deny_non_local (drop queries unless can be answered from local-data)
  # refuse_non_local (like deny_non_local but polite error reply).
  # access-control: 0.0.0.0/0 refuse
  # access-control: 127.0.0.0/8 allow
  # access-control: ::0/0 refuse
  # access-control: ::1 allow
  # access-control: ::ffff:127.0.0.1 allow

  # tag access-control with list of tags (in "" with spaces between)
  # Clients using this access control element use localzones that
  # are tagged with one of these tags.
  # access-control-tag: 192.0.2.0/24 "tag2 tag3"

  # set action for particular tag for given access control element
  # if you have multiple tag values, the tag used to lookup the action
  # is the first tag match between access-control-tag and local-zone-tag
  # where "first" comes from the order of the define-tag values.
  # access-control-tag-action: 192.0.2.0/24 tag3 refuse

  # set redirect data for particular tag for access control element
  # access-control-tag-data: 192.0.2.0/24 tag2 "A 127.0.0.1"

  # Set view for access control element
  # access-control-view: 192.0.2.0/24 viewname
{%- for a in settings.answer %}
  access-control: {{ a }} allow_snoop
{%- endfor %}


  # By default, for a number of zones a small default 'nothing here'
  # reply is built-in.  Query traffic is thus blocked.  If you
  # wish to serve such zone you can unblock them by uncommenting one
  # of the nodefault statements below.
  # You may also have to use domain-insecure: zone to make DNSSEC work,
  # unless you have your own trust anchors for this zone.
  # a number of locally served zones can be configured.
  # 	local-zone: <zone> <type>
  # 	local-data: "<resource record string>"
  # o deny serves local data (if any), else, drops queries.
  # o refuse serves local data (if any), else, replies with error.
  # o static serves local data, else, nxdomain or nodata answer.
  # o transparent gives local data, but resolves normally for other names
  # o redirect serves the zone data for any subdomain in the zone.
  # o nodefault can be used to normally resolve AS112 zones.
  # o typetransparent resolves normally for other types and other names
  # o inform acts like transparent, but logs client IP address
  # o inform_deny drops queries and logs client IP address
  # o inform_redirect redirects queries and logs client IP address
  # o always_transparent, always_refuse, always_nxdomain, always_nodata,
  #   always_deny resolve in that way but ignore local data for
  #   that name
  # o always_null returns 0.0.0.0 or ::0 for any name in the zone.
  # o noview breaks out of that view towards global local-zones.
  #
  # defaults are localhost address, reverse for 127.0.0.1 and ::1
  # and nxdomain for AS112 zones. If you configure one of these zones
  # the default content is omitted, or you can omit it with 'nodefault'.
  #
  # If you configure local-data without specifying local-zone, by
  # default a transparent local-zone is created for the data.
  #
  # You can add locally served data with
  # local-zone: "local." static
  # local-data: "mycomputer.local. IN A 192.0.2.51"
  # local-data: 'mytext.local TXT "content of text record"'
  #
  # You can override certain queries with
  # local-data: "adserver.example.com A 127.0.0.1"
  #
  # You can redirect a domain to a fixed address with
  # (this makes example.com, www.example.com, etc, all go to 192.0.2.3)
  # local-zone: "example.com" redirect
  # local-data: "example.com A 192.0.2.3"
  #
  # Shorthand to make PTR records, "IPv4 name" or "IPv6 name".
  # You can also add PTR records using local-data directly, but then
  # you need to do the reverse notation yourself.
  # local-data-ptr: "192.0.2.3 www.example.com"

  # tag a localzone with a list of tag names (in "" with spaces between)
  # local-zone-tag: "example.com" "tag2 tag3"

  # add a netblock specific override to a localzone, with zone type
  # local-zone-override: "example.com" 192.0.2.0/24 refuse

{%- if settings.authorative.signed is defined %}
  {%- for z,s in settings.authorative.signed.items() %}
  local-zone: "{{ z }}" transparent
  {%- endfor %}
{%- endif %}

{%- if settings.authorative.unsigned is defined %}
  {%- for z,s in settings.authorative.unsigned.items() %}
  local-zone: "{{ z }}" transparent
  # You may also have to use domain-insecure: zone to make DNSSEC work,
	# unless you have your own trust anchors for this zone.
  domain-insecure: {{ z }}
  {%- endfor %}
{%- endif %}


# Stub zones.
# Create entries like below, to make all queries for 'example.com' and
# 'example.org' go to the given list of nameservers. list zero or more
# nameservers by hostname or by ipaddress. If you set stub-prime to yes,
# the list is treated as priming hints (default is no).
# With stub-first yes, it attempts without the stub if it fails.
# Consider adding domain-insecure: name and local-zone: name nodefault
# to the server: section if the stub is a locally served zone.
# stub-zone:
#	name: "example.com"
#	stub-addr: 192.0.2.68
#	stub-prime: no
#	stub-first: no
#	stub-tls-upstream: no
#	stub-no-cache: no
# stub-zone:
#	name: "example.org"
#	stub-host: ns.example.com.
{%- if  settings.authorative.signed is defined or
        settings.authorative.unsigned is defined %}
  {%- if settings.authorative.signed is defined %}
    {%- for z,s in settings.authorative.signed.items() %}
stub-zone:
  name: "{{ z }}"
  stub-addr: {{ s if s else "127.0.0.1" }}
    {%- endfor %}
  {%- endif %}
  {%- if settings.authorative.unsigned is defined %}
    {%- for z,s in settings.authorative.unsigned.items() %}
stub-zone:
  name: "{{ z }}"
  stub-addr: {{ s if s else "127.0.0.1" }}
    {%- endfor %}
  {%- endif %}
{%- endif %}


# Forward zones
# Create entries like below, to make all queries for 'example.com' and
# 'example.org' go to the given list of servers. These servers have to handle
# recursion to other nameservers. List zero or more nameservers by hostname
# or by ipaddress. Use an entry with name "." to forward all queries.
# If you enable forward-first, it attempts without the forward if it fails.
# forward-zone:
# 	name: "example.com"
# 	forward-addr: 192.0.2.68
# 	forward-addr: 192.0.2.73@5355  # forward to port 5355.
# 	forward-first: no
# 	forward-tls-upstream: no
#	forward-no-cache: no
# forward-zone:
# 	name: "example.org"
# 	forward-host: fwd.example.com


# Authority zones
# The data for these zones is kept locally, from a file or downloaded.
# The data can be served to downstream clients, or used instead of the
# upstream (which saves a lookup to the upstream).  The first example
# has a copy of the root for local usage.  The second serves example.org
# authoritatively.  zonefile: reads from file (and writes to it if you also
# download it), primary: fetches with AXFR and IXFR, or url to zonefile.
# With allow-notify: you can give additional (apart from primaries) sources of
# notifies.
# auth-zone:
#	name: "."
#	primary: 199.9.14.201         # b.root-servers.net
#	primary: 192.33.4.12          # c.root-servers.net
#	primary: 199.7.91.13          # d.root-servers.net
#	primary: 192.5.5.241          # f.root-servers.net
#	primary: 192.112.36.4         # g.root-servers.net
#	primary: 193.0.14.129         # k.root-servers.net
#	primary: 192.0.47.132         # xfr.cjr.dns.icann.org
#	primary: 192.0.32.132         # xfr.lax.dns.icann.org
#	primary: 2001:500:200::b      # b.root-servers.net
#	primary: 2001:500:2::c        # c.root-servers.net
#	primary: 2001:500:2d::d       # d.root-servers.net
#	primary: 2001:500:2f::f       # f.root-servers.net
#	primary: 2001:500:12::d0d     # g.root-servers.net
#	primary: 2001:7fd::1          # k.root-servers.net
#	primary: 2620:0:2830:202::132 # xfr.cjr.dns.icann.org
#	primary: 2620:0:2d0:202::132  # xfr.lax.dns.icann.org
#	fallback-enabled: yes
#	for-downstream: no
#	for-upstream: yes
# auth-zone:
#	name: "example.org"
#	for-downstream: yes
#	for-upstream: yes
#	zonemd-reject-absence: no
#	zonefile: "example.org.zone"


# Views
# Create named views. Name must be unique. Map views to requests using
# the access-control-view option. Views can contain zero or more local-zone
# and local-data options. Options from matching views will override global
# options. Global options will be used if no matching view is found.
# With view-first yes, it will try to answer using the global local-zone and
# local-data elements if there is no view specific match.
# view:
#	name: "viewname"
#	local-zone: "example.com" redirect
#	local-data: "example.com A 192.0.2.3"
#	local-data-ptr: "192.0.2.3 www.example.com"
#	view-first: no
# view:
#	name: "anotherview"
#	local-zone: "example.com" refuse
