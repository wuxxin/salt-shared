{#
http_frontend ssl cert:
1. use cert+key, if cert+key is set
2. use letsencrypt, if enabled and successful
3. use autogenerated selfsigned cert
#}

{% set domain = salt['pillar.get']('node:hostname', grains['fqdn']) %}

{% load_yaml as defaults %}
domain: {{ domain }}
allowed_hosts: []
listen_ip:
  - {{ salt['cmd.run_stdout']('ip -j addr show $(ip -j route list default | sed -r \'s/.+dev":"([^"]+)".+/\\1/g\') | sed -r \'s/.+"inet","local":"([^"]+)",.+/\\1/g\'', python_shell=true) }}
letsencrypt: true
client_cert_mandatory: false
user: {{ salt['cmd.run_stdout']('getent passwd 1000 | cut -d: -f1', python_shell=True)|d('user') }}
group: ssl-cert
cert_dir: /etc/ssl
{# nginx client_max_body_size: <wanted max upload size, 0=disabled, eg. 150M> #}
client_max_body_size: 0
{# list of ips allowed to set real ip proxy header, http://nginx.org/en/docs/http/ngx_http_realip_module.html #}
set_real_ip_from: "127.0.0.1"
{# list of commands executed after ssl certificate has changed, eg. letsencrypt update #}
{# cmds are run as settings.user, each usage of sudo needs an entry in the sudoers files #}
on_ssl_renew:
  - /usr/bin/sudo /usr/bin/systemctl reload-or-restart nginx
maintenance_target: /var/lib/http_frontend/www/503.html
file_root: /var/lib/http_frontend/empty
{#
upstream: [] # list of {name, server}
location: [] # list of {source, target}
host: [] # list of {domain, client_cert_mandatory, location}
key: | # key, pem encoded ssl key, default empty
cert: | # cert, pem encoded ssl cert chain, default empty
#}

{# mostly internal settings #}
main_endpoint: "127.0.0.1:8443"
alpn_proxy: "127.0.0.1:9443"
alpn_endpoint: "127.0.0.1:10443"
stub_status_endpoint: "127.0.0.1:10080"

ssl_key: server.key.pem
ssl_dhparam: server.dhparam.pem
ssl_chain_cert: server.cert.pem
ssl_full_cert: server.cert.dhparam.pem
ssl_client_ca: client-ca.cert.pem
ssl_client_crl: client-ca.crl.pem

external:
  acme_sh_tar_gz:
    version: 2.8.5
    latest: curl -L -s -o /dev/null -w "%{url_effective}" "https://github.com/Neilpang/acme.sh/releases/latest" | sed -r "s/.*\/([^\/]+)$/\1/"
    download: "https://github.com/Neilpang/acme.sh/archive/##version##.tar.gz"
    target: lib
    hash: 45d964de8970096dae06aaa45dba2d9d09a41c0a43355191ee627eb00ba5db45
  easy_rsa_tar_gz:
    version: 3.0.7
    latest: curl -L -s -o /dev/null -w "%{url_effective}" "https://github.com/OpenVPN/easy-rsa/releases/latest" | sed -r "s/.*\/v([^\/]+)$/\1/"
    download: "https://github.com/OpenVPN/easy-rsa/releases/download/v##version##/EasyRSA-##version##.tgz"
    target: lib
    hash: 157d2e8c115c3ad070c1b2641a4c9191e06a32a8e50971847a718251eeb510a8
{% endload %}

{% set settings=salt['grains.filter_by']({'none': defaults},
  grain='none', default= 'none', merge= salt['pillar.get']('http_frontend', {})) %}

{% if settings.home_dir is not defined %}
  {% do settings.update(
    { 'home_dir': salt['cmd.run']('getent passwd '+
      settings.user+ ' | cut -d: -f6', python_shell=True) } ) %}
{% endif %}

{% if settings.allowed_hosts == [] %}
  {% do settings.update({'allowed_hosts': [settings.domain]}) %}
{% endif %}

{# expand ##version## in field external.*.download #}
{% for n,v in settings.external.items() %}
  {% set dummy=settings.external[n].__setitem__('download',
        v['download']|regex_replace('##version##', v.version)) %}
{% endfor %}
