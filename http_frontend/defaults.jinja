{#
http_frontend ssl cert:
1. use cert+key, if cert+key is set
2. use letsencrypt, if enabled and successful
3. use autogenerated selfsigned cert
#}

{% set domain = salt['pillar.get']('node:hostname', 'nohostname')}

{% load_yaml as defaults %}
domain: {{ domain }}
allowed_hosts: {{ salt['pillar.get']('node:allowed_hosts', domain) }}
listen_ip:
- '{{ salt['cmd.run_stdout']('ip route list default | sed -r "s/.+src ([0-9a-f.:]+) metric.*/\\1/g"', python_shell=true) }}'
letsencrypt: true
ssl_client_cert_mandatory: false
user: {{ salt['cmd.run_stdout']('getent passwd 1000 | cut -d: -f1', python_shell=True)|d('user') }}
group: ssl-cert
cert_dir: /etc/ssl
{# nginx client_max_body_size: <wanted max upload size, 0=disabled, eg. 150M> #}
client_max_body_size: 0
{# list of ip's allowed to set real ip proxy header see http://nginx.org/en/docs/http/ngx_http_realip_module.html #}
set_real_ip_from: "127.0.0.1"
{# list of commands to be executted after ssl certificate has changed, eg. letsencrypt update.
cmds are executed as settings.user, each sudo needs an entry in sudoers for proper privilege handling #}
ssl_reload_cmd:
  - sudo /bin/systemctl reload-or-restart nginx
  {# - sudo /bin/systemctl restart postfix #}

{#
upstream: [] # list of upstream services
location: [] # list of [source, dest] tuples
host: [] # list of [domain, location, upstream]
key: | # key, pem encoded ssl key, default empty
cert: | # cert, pem encoded ssl cert chain, default empty
#}


{# mostly internal settings #}
ssl_key: server.key.pem
ssl_dhparam: server.dhparam.pem
ssl_chain_cert: server.cert.pem
ssl_full_cert: server.cert.dhparam.pem
ssl_client_ca: client-ca.cert.pem
ssl_client_crl: client-ca.crl.pem

main_endpoint: "127.0.0.1:8443"
alpn_proxy: "127.0.0.1:9443"
alpn_endpoint: "127.0.0.1:10443"
stub_status_endpoint: "127.0.0.1:10080"
maintenance_target: /var/lib/http_frontend/www/503.html

external:
  acme_sh_tar_gz:
    version: 2.8.5
    latest: curl -L -s -o /dev/null -w "%{url_effective}" "https://github.com/Neilpang/acme.sh/releases/latest" | sed -r "s/.*\/([^\/]+)$/\1/"
    download: "https://github.com/Neilpang/acme.sh/archive/##version##.tar.gz"
    target: lib
    hash: 45d964de8970096dae06aaa45dba2d9d09a41c0a43355191ee627eb00ba5db45
  easy_rsa_tar_gz:
    version: 3.0.7
    latest: curl -L -s -o /dev/null -w "%{url_effective}" "https://github.com/OpenVPN/easy-rsa/releases/latest" | sed -r "s/.*\/v([^\/]+)$/\1/"
    download: "https://github.com/OpenVPN/easy-rsa/releases/download/v##version##/EasyRSA-##version##.tgz"
    target: lib
    hash: 157d2e8c115c3ad070c1b2641a4c9191e06a32a8e50971847a718251eeb510a8
{% endload %}

{% set settings=salt['grains.filter_by']({'none': defaults},
  grain='none', default= 'none', merge= salt['pillar.get']('http_frontend', {})) %}

{% if settings.home_dir is not defined %}
  {% do settings.update(
    { 'home_dir': salt['cmd.run']('getent passwd '+
      settings.user+ ' | cut -d: -f6', python_shell=True) } ) %}
{% endif %}

{# expand ##version## in field external.*.download #}
{% for n,v in settings.external.items() %}
  {% set dummy=settings.external[n].__setitem__('download',
        v['download']|regex_replace('##version##', v.version)) %}
  {% endif %}
{% endfor %}
