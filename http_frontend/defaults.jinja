{#
http_frontend ssl cert:
1. use cert+key, if cert+key is set
2. use letsencrypt, if enabled and successful
3. use autogenerated selfsigned cert
#}

{% set domain = salt['pillar.get']('node:hostname', grains['fqdn']) %}
{% set def_route_device = salt['cmd.run_stdout']('ip -j route list default | sed -r \'s/.+dev":"([^"]+)".+/\\1/g\'', python_shell=true) %}
{% set def_route_ip = salt['cmd.run_stdout']('ip -j addr show '+ def_route_device+ ' | sed -r \'s/.+"inet","local":"([^"]+)",.+/\\1/g\'', python_shell=true) %}
{% set def_user= salt['cmd.run_stdout']('getent passwd 1000 | cut -d: -f1', python_shell=True) %}
{% set users= salt['pillar.get']('node:users', [{'name': def_user}]) %}
{% set user= users[0].name %}
{% set user_info= salt['user.info'](user) %}
{% set user_home= user_info['home'] %}
{% set date_time= salt['system.get_system_date_time']() %}

{% load_yaml as defaults %}
user: {{ user }}
listen_ip:
  - {{ def_route_ip }}
{# default http, https ports,
  plain http port will serve redirection as convinience if needed,
  but is not neeed for normal operation  #}
http_port: 80
https_port: 443
{# list of ips allowed to set real ip proxy header. The Default is correct and safe, read
http://nginx.org/en/docs/http/ngx_http_realip_module.html before changing this #}
set_real_ip_from: "127.0.0.1"
{# nginx client_max_body_size: <wanted max upload size, 0=disabled, eg. 150M> #}
client_max_body_size: 0

domain: {{ domain }}
{# allowed_hosts: List of expected hostnames (SAN's), must include domain as first entry #}
allowed_hosts: []
{# isolated_hosts: List of additional hostnames, will need/create one cert per hostname #}
isolated_hosts: []
{# use letsencrypt to gather certificates #}
letsencrypt: true
{# key: | # key, pem encoded ssl key, default empty #}
{# cert: | # cert, pem encoded ssl cert chain, default empty #}
client_cert_verify: false
client_cert_mandatory: false
cert_dir: {{ user_home }}/ssl
{# list of commands executed after ssl certificate has changed, eg. letsencrypt update #}
{# cmds are run as settings.user, each usage of sudo needs an entry in the sudoers files #}
{# available environment vars: DOMAIN, KEYFILE, CERTFILE, FULLCHAINFILE #}
on_ssl_renew:
  - /usr/bin/sudo /usr/bin/systemctl reload-or-restart nginx

{# filepath, if exists will be displayed instead of normal operation#}
maintenance_target: /var/lib/http_frontend/www/503.html

{# response headers to be inserted, if header or host:header is not present or empty dict. #}
default_header:
  {# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security #}
  Strict-Transport-Security: '"max-age=31536000"' {# 3x10^7 s ~ 1 y #}
  {# https://scotthelme.co.uk/hardening-your-http-response-headers #}
  Referrer-Policy: '"strict-origin-when-cross-origin"'
  {# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy #}
  X-Content-Type-Options: '"nosniff" always'

{# headers to be inserted for the main domain:
  will use default_header if not existing or empty,
  Use Boolean false to not set any default header #}
header: {}

{#
upstream: # [] # list of {name, server}
  - name: webhooks
    server: "127.0.0.1:5555"
location:
  - source: /hooks/
    target: proxy_pass http://webhooks
  - source: /
    keep_header: true
    target: |
        add_header X-Whatever-Type easy;
        root /var/www/main.domain/
host:
  - domain: another.domain
    client_cert_verify: false,true
    client_cert_mandatory: false,true
    header: {}
    location:
      - source: /
        keep_header: true
        target: root /var/www/another.domain/
#}

{# additional customization of  nginx configuration, strings can be multiline yaml like "|" #}
custom:
  nginx:
    global: ""
    stream: ""
    http: ""
    host:
      default: ""
      {# any.other.vhost.name: string #}

geoip:
  enabled: false
  provider: dbip_city

{# mostly internal settings #}
geoip_provider:
  dbip_city:
    external: dbip_city_mmdb_gz
    transform: gzip
    database: /usr/local/lib/dbip-city.mmdb
    fields:
      geoip2_data_country_code: ['country iso_code', 'X-Country-Code']
      geoip2_data_country_name: ['country names en', 'X-Country-Name']
      geoip2_data_city_name: ['city names en', 'X-City-Name']

main_endpoint: "127.0.0.1:8443"
alpn_proxy: "127.0.0.1:9443"
alpn_endpoint: "127.0.0.1:10443"
stub_status_endpoint: "127.0.0.1:10080"

ssl_key: server.key.pem
ssl_dhparam: server.dhparam.pem
ssl_cert: server.cert.pem
ssl_chain_cert: server.chain.cert.pem
ssl_full_cert: server.chain.cert.dhparam.pem
ssl_client_ca: client-ca.cert.pem
ssl_client_crl: client-ca.crl.pem

external:
  acme_sh_tar_gz:
    version: 2.8.6
    latest: curl -L -s -o /dev/null -w "%{url_effective}" "https://github.com/acmesh-official/acme.sh/releases/latest" | sed -r "s/.*\/([^\/]+)$/\1/"
    download: "https://github.com/acmesh-official/acme.sh/archive/##version##.tar.gz"
    target: /usr/local/lib/acme_sh.tar.gz
    hash: fd36cb749466296ded521ceacda3fc841ec76be620900d1116e0492d171c1d9f
  easy_rsa_tar_gz:
    version: 3.0.7
    latest: curl -L -s -o /dev/null -w "%{url_effective}" "https://github.com/OpenVPN/easy-rsa/releases/latest" | sed -r "s/.*\/v([^\/]+)$/\1/"
    download: "https://github.com/OpenVPN/easy-rsa/releases/download/v##version##/EasyRSA-##version##.tgz"
    target: /usr/local/lib/easy_rsa.tar.gz
    hash: 157d2e8c115c3ad070c1b2641a4c9191e06a32a8e50971847a718251eeb510a8
  dbip_city_mmdb_gz:
    version: 2020-08
    latest: echo "{{ date_time[:7] }}"
    download: "https://download.db-ip.com/free/dbip-city-lite-##version##.mmdb.gz"
    target: /usr/local/lib/dbip-city.mmdb.gz
    hash: 55262b3e545c392df46ca8f019c484ef36bf12ad10e118a4a3014d6060a7280f
{% endload %}

{% set settings=salt['grains.filter_by']({'none': defaults},
  grain='none', default= 'none', merge= salt['pillar.get']('http_frontend', {})) %}

{% if settings.home_dir is not defined %}
  {% do settings.update(
    { 'home_dir': salt['cmd.run']('getent passwd '+
      settings.user+ ' | cut -d: -f6', python_shell=True) } ) %}
{% endif %}

{% if settings.allowed_hosts == [] %}
  {% do settings.update({'allowed_hosts': [settings.domain]}) %}
{% endif %}

{# expand ##version## in field external.*.download #}
{% for n,v in settings.external.items() %}
  {% set dummy=settings.external[n].__setitem__('download',
        v['download']|regex_replace('##version##', v.version)) %}
{% endfor %}
