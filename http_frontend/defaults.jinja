{% set user_1000= salt['cmd.run_stdout']('getent passwd 1000 | cut -d: -f1', python_shell=True) %}
{% set node_users= salt['pillar.get']('node:users', [{'name': user_1000}]) %}
{% set def_user= node_users[0].name %}
{% set def_domain = salt['pillar.get']('node:hostname', grains['fqdn']) %}
{% set def_route_device = salt['cmd.run_stdout']('ip -j route list default | sed -r \'s/.+dev":"([^"]+)".+/\\1/g\'', python_shell=true) %}
{% set def_route_ip = salt['cmd.run_stdout']('ip -j addr show '+ def_route_device+ ' | sed -r \'s/.+"inet","local":"([^"]+)",.+/\\1/g\'', python_shell=true) %}
{% set current_date_time= salt['system.get_system_date_time']() %}
{% import_yaml "http_frontend/external.yml" as http_frontend_external %}

{% load_yaml as defaults %}
{# list of ip's for nginx to listen #}
listen_ip:
  - {{ def_route_ip }}
{# allowed_service for nginx to expose: ['http', 'https', 'http_proxy', 'https_proxy'] #}
listen_service:
  - http
  - https
{# default http-, https-, http_proxy-, https_proxy- ports #}
{# http_port will serve redirection to https_port if needed, but is not needed #}
http_port: 80
{# https_port is required if acme certificate creation is requested and dns is not used #}
https_port: 443
{# http_proxy_port and https_proxy_port both expect proxy protocol #}
http_proxy_port: 8080
https_proxy_port: 8443
{# list of ip's allowed to set real ip proxy header. The Default is correct and safe, read
http://nginx.org/en/docs/http/ngx_http_realip_module.html before changing this #}
set_real_ip_from: "127.0.0.1"

{# server_name: String of space seperated list of expected hostnames (SAN's) #}
{# the first name will be available as settings.domain in support files #}
server_name: "{{ def_domain }}"
{# virtual_names: List of additional dicts of hostnames, will need/create one cert per entry #}
virtual_names: []
{# - name: xx.aa.xx [xx.yy.yy]*
     key: | # key, pem encoded ssl key,needed default empty
     cert: | # crt, pem encoded ssl cert chain, default empty
     acme:
       # enabled: default is settings.ssl.acme.enabled
       enabled: false
       # challenge: default is settings.ssl.acme.challenge
       challenge: alpn
       # env: {} no default
       env: {}
#}

{# ssl encryption: use cert+key if exists,
else use acme to create host certs if acme:enabled and successful,
else use local CA to create host certs if local_ca == true,
else create a selfsigned host cert #}
ssl:
  {# user for cert operations #}
  user: {{ def_user }}
  {# basepath for certs and keys, easyrsa, acme #}
  base_dir: /var/lib/http_frontend/cert_dir
  {# on_renew: list of commands executed after ssl certificate has changed
      cmds are runas ssl.user, env vars set: DOMAIN, KEYFILE, CERTFILE, FULLCHAINFILE #}
  on_renew:
    - /usr/bin/sudo /usr/bin/systemctl reload-or-restart nginx
  {# client_cert_verify: set X-Ssl-Client-Issuer, X-Ssl-Client-Subject, X-Ssl-Client-Verify as UPSTREAM Header #}
  client_cert_verify: false
  {# client_cert_mandatory: a valid client certificate is mandatory #}
  client_cert_mandatory: false
  {# cert: pem encoded ssl cert chain for allowed_hosts, default empty #}
  # cert: |
  {# key: pem encoded ssl key, default empty #}
  # key: |
  {# local_ca: use local ca for signing host certs, else create selfsigned host certs if needed #}
  local_ca: true
  acme:
  {# if enabled:false, dont use acme for ANY certificate #}
    enabled: true
    global: true
    {# if host:false, dont use acme for settings.hostname #}
    host: true
    {# challenge: alpn(default)|dns_*), eg. dns_knot,
        see https://github.com/acmesh-official/acme.sh/wiki/dnsapi #}
    challenge: alpn
    {# service: acme server url, default= letsencrypt production
      for letsencrypt staging use
      https://acme-staging-v02.api.letsencrypt.org/directory
    #}
    service: https://acme-v02.api.letsencrypt.org/directory
    env: {}
      # KNOT_SERVER: "dns.example.com"
      # KNOT_KEY: ""

{# nginx client_max_body_size: <wanted max upload size, 0=disabled, eg. 150M> #}
client_max_body_size: 150M
{# filepath, if exists will be displayed instead of normal operation #}
maintenance_target: /var/lib/http_frontend/www/503.html
{# filepath, if exists will be displayed instead of standard 502 error page on upstream timeout #}
upstream_error_target: /var/lib/http_frontend/www/502.html

{# response headers to be inserted, if header or host:header is not present or empty dict. #}
default_header:
  {# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security #}
  Strict-Transport-Security: max-age=31536000 {# 3x10^7 s ~ 1 y #}
  {# https://scotthelme.co.uk/hardening-your-http-response-headers #}
  X-Frame-Options: SAMEORIGIN
  Referrer-Policy: strict-origin-when-cross-origin
  {# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
  X-Content-Type-Options: '"nosniff"' #}

{# response header #}
{# dict of header vars for the main domain, will use default_header if not existing
header: {}
#}

{# upstream connections #}
upstream: []
{#
# list of {name, server}
  - name: webhooks
    server: "127.0.0.1:5555"
#}

{# main server location #}
location: []
{#
  - source: /hooks/
    target: proxy_pass http://webhooks
  - source: /
    keep_header: true
    target: |
        add_header X-Whatever-Type easy;
        root /var/www/main.domain/
#}

{# vhost declaration #}
host: []
{#
  - name: another.domain yet.another.domain
    client_cert_verify: false*,true
    client_cert_mandatory: false*,true
    # additional customization of nginx configuration, can be multiline yaml like "|"
    custom: ''
    header: {}
    oauth2proxy:
      enabled: true
      path: /oauth2proxy
      upstream: oauth2proxy
    location:
      - source: /
        oauth2proxy_auth_request: true
        target: root /var/www/another.domain/
#}

{# nginx additional customization, can be multiline yaml like "|" #}
custom:
  nginx:
    global: ""
    stream: ""
    http: ""
    host: ""

{# geoip support #}
geoip:
  enabled: false
  global: true
  host: true
  {# individual vhosts can enable geoip in host via geoip:true #}
  provider: dbip_city

{# rate limit support #}
ratelimit:
  enabled: false
  global: false
  host: true
  {# individual vhosts can enable rate limit in host via ratelimit:true #}
  reqs_per_second: 15
  burst_per_second: 15
  reqs_per_minute: 200
  burst_per_minute: 100
  conn_per_ip: 20

{# metric support #}
metrics:
  buildin: true
  prometheus: false

{#
### internal settings ####
change only with good reason
#}

{# user to run nginx as #}
nginx_user: www-data

{# internal endpoints #}
alpnproxy_endpoint: "127.0.0.1:9443"
alpn_endpoint: "127.0.0.1:10443"
stub_status_endpoint: "127.0.0.1:10080"
prometheus_endpoint: "127.0.0.1:9145"

{#  key,dhparam,cert,chain_cert,full_cert names (without path) #}
ssl_key: server.key.pem
ssl_dhparam: server.dhparam.pem
ssl_cert: server.cert.pem
ssl_chain_cert: server.chain.cert.pem
ssl_full_cert: server.chain.cert.dhparam.pem
{# key,cert,full_cert of hostname.invalid #}
ssl_invalid_cert: ssl-cert-invalid.pem
ssl_invalid_key: ssl-cert-invalid.key
ssl_invalid_full_cert: ssl-cert-invalid-full.pem
{# key,cert of selfsigned host domain #}
ssl_snakeoil_cert_path: /etc/ssl/certs/ssl-cert-snakeoil.pem
ssl_snakeoil_key_path: /etc/ssl/private/ssl-cert-snakeoil.key
{# local ca (easy rsa) config #}
ssl_local_ca_cert: local-ca.cert.pem
ssl_local_ca_crl: local-ca.crl.pem
ssl_local_ca_validity_days: 1095
ssl_local_ca_algo: ed
ssl_local_ca_curve: ed25519


{# geoip provider: currently only dbip_city #}
geoip_provider:
  dbip_city:
    external: dbip_city_mmdb_gz
    transform: gzip
    database: /usr/local/lib/dbip-city.mmdb
    fields:
      geoip_country_code:
        select: country iso_code
        header: X-Country-Code
      geoip_country_name:
        select: country names en
        header: X-Country-Name
      geoip_city_name:
        select: city names en
        header: X-City-Name
      geoip_latitude:
        select: location latitude
        header: X-Latitude
      geoip_longitude:
        select: location longitude
        header: X-Longitude
      geoip_region_name:
        select: subdivisions 0 names en
        header: X-Region-Name

{# external software #}
external: {{ http_frontend_external.objects }}

{% endload %}

{% set settings=salt['grains.filter_by']({'none': defaults},
  grain='none', default= 'none', merge= salt['pillar.get']('http_frontend', {})) %}

{# add domain (computed from first server_name) #}
{% do settings.update( {'domain': settings.server_name.split(' \n\t')[0]} ) %}

{# compute https_proxy_endpoints and http_proxy_endpoints #}
{% set ns = namespace() %}
{% set ns.https_proxy_endpoints= ['127.0.0.1:' ~ settings.https_proxy_port] ) %}
{% set ns.http_proxy_endpoints= ['127.0.0.1:' ~ settings.http_proxy_port] ) %}

{% for ip in settings.listen_ip %}
  {% if 'https_proxy' in settings.listen_service %}
    {% do ns.https_proxy_endpoints.append(ip ~ ':' ~ settings.https_proxy_port ) %}
  {% endif %}
  {% if 'http_proxy' in settings.listen_service %}
    {% do ns.http_proxy_endpoints.append(ip ~ ':' ~ settings.http_proxy_port ) %}
  {% endif %}
{% endfor %}

{% do settings.update( {'https_proxy_endpoints': ns.https_proxy_endpoints} ) %}
{% do settings.update( {'http_proxy_endpoints': ns.http_proxy_endpoints} ) %}

{% do settings.update( {'alpn_endpoint_port': settings.alpn_endpoint|regex_replace('^[^:]:([0-9]+)', '\\1')} ) %}
{% do settings.update( {'ssl_acme_service': settings.ssl.acme.service if not settings.ssl.acme.staging else settings.ssl.acme.staging_service} ) %}
{% do settings.udpate( {'ssl_acme_domain': settings.ssl_acme_service|regex_replace('https?://([^/]+)/.*', '\\1')} ) %}

{# expand ##version## in field external.*.download #}
{% for n,v in settings.external.items() %}
  {% set fulldownload=settings.external[n]['download']|regex_replace('##version##', v.version) %}
  {% do settings.external[n].update( {'download': fulldownload } ) %}
{% endfor %}
