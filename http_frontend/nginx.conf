{%- macro linesplit(value, width=0) %}
  {%- set value_lines= value.split('\\n') %}
  {%- for i in value_lines %}
    {%- if i != '' %}
{{ i|indent(width, True) }}
    {%- endif %}
  {%- endfor %}
{%- endmacro %}

{%- macro set_header(header, default_header, width=0) %}
  {%- set workheader = default_header %}
  {%- if header is not false %}
    {%- set workheader = header %}
  {%- endif %}
  {%- for key,value in workheader.items() %}
    {%- set workstr = 'add_header ' ~ key ~ ' ' ~ value ~ ';' %}
{{ workstr|indent(width, True) }}
  {%- endfor %}
{%- endmacro %}

{%- macro client_cert(verify, mandatory) %}
  {%- if verify or mandatory %}
    ssl_client_certificate {{ settings.cert_dir }}/{{ settings.ssl_client_ca }};
    ssl_crl {{ settings.cert_dir }}/{{ settings.ssl_client_crl }};
    ssl_verify_client {{ 'on' if mandatory else 'optional' }};
    proxy_set_header X-Ssl-Client-Issuer $ssl_client_i_dn;
    proxy_set_header X-Ssl-Client-Subject $ssl_client_s_dn;
    proxy_set_header X-Ssl-Client-Verify $ssl_client_verify;
  {%- else %}
    proxy_set_header X-Ssl-Client-Issuer "";
    proxy_set_header X-Ssl-Client-Subject "";
    proxy_set_header X-Ssl-Client-Verify "";
  {%- endif %}
{%- endmacro %}

{%- macro set_proxy_geoip_header(width= 0) %}
  {%- if settings.geoip.enabled %}
    {%- set provider = settings.geoip_provider[settings.geoip.provider] %}
    {%- for k,v in provider.fields.items() %}
      {%- set workstr = 'proxy_set_header ' ~ v.header ~ ' $' ~ k ~ ';' %}
{{ workstr|indent(width, True) }}
    {%- endfor %}
  {%- else %}
    {%- for k in ['X-Country-Code', 'X-Country-Name', 'X-City-Name',
                  'X-Latitude', 'X-Longitude', 'X-Region-Name' ] %}
      {%- set workstr = 'proxy_set_header ' ~ k ~ '"";' %}
{{ workstr|indent(width, True) }}
    {%- endfor %}
  {%- endif %}
{%- endmacro %}

{%- macro set_ratelimit(width= 0) %}
  {%- if settings.ratelimit.enabled %}
  limit_conn conn2ip {{ settings.ratelimit.conn_per_ip }};
  limit_req zone=flood burst={{ settings.ratelimit.burst_per_second }} nodelay;
  limit_req zone=bot burst={{ settings.ratelimit.burst_per_minute }} nodelay;
  {%- endif %}
{%- endmacro %}

{%- macro oauth2proxy_location(path="/oauth2proxy", proxy_name="oauth2proxy") %}
  location = {{ path }}/auth {
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Scheme         $scheme;
    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body           off;
    proxy_pass       http://{{ proxy_name }};
  }
  location {{ path }}/ {
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
    proxy_pass       http://{{ proxy_name }};
  }
{%- endmacro %}

{%- macro oauth2proxy_access(auth="/oauth2proxy") %}
    auth_request /{{ auth }}/auth;
    error_page 401 = /{{ auth }}/sign_in;
    # pass information via X-User and X-Email headers to backend,
    # requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;
    # if you enabled --pass-access-token, this will pass the token to the backend
    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    proxy_set_header X-Access-Token $token;
    # if you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;
    # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
    # limit and so the OAuth2 Proxy splits these into multiple parts.
    # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
    # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
    auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;
    # Extract the Cookie attributes from the first Set-Cookie header and append them
    # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
    if ($auth_cookie ~* "(; .*)") {
        set $auth_cookie_name_0 $auth_cookie;
        set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
    }
    # Send both Set-Cookie headers now if there was a second part
    if ($auth_cookie_name_upstream_1) {
        add_header Set-Cookie $auth_cookie_name_0;
        add_header Set-Cookie $auth_cookie_name_1;
    }
{%- endmacro %}

user www-data;
worker_processes auto;
pid /run/nginx.pid;

# load additional modules (should be included early)
# include /etc/nginx/modules-enabled/*.conf;
include /usr/share/nginx/modules-available/mod-stream.conf;
include /usr/share/nginx/modules-available/mod-http-subs-filter.conf;
include /usr/share/nginx/modules-available/mod-http-geoip2.conf;
include /usr/share/nginx/modules-available/mod-http-dav-ext.conf;
include /usr/share/nginx/modules-available/mod-http-ndk.conf;
include /usr/share/nginx/modules-available/mod-http-lua.conf;

{{ linesplit(settings.custom.nginx.global) }}

events {
  # worker_connections (includes connections to backends): default= 512
  worker_connections 1024;
}

### Incoming HTTPS stream switch
stream {
  # manage public https listen port 443 (https) as stream
  # if not ALPN challenge:
  #   proxy connect to localhost:8443 (nginx https server)
  # else redirect ALPN challenges to letsencrypt:
  #   proxy connect to localhost:9443 (nginx stream proxy)
  #   then connect to localhost:10443 (acme.sh ALPN endpoint)
  map $ssl_preread_alpn_protocols $stream_proxy {
    ~\bacme-tls/1\b "alpnproxy";
    default "main";
  }
  upstream main {
    server {{ settings.main_endpoint }};
  }
  upstream alpnproxy {
    server {{ settings.alpn_proxy }};
  }
  server {
{%- for ip in settings.listen_ip %}
    listen {{ ip }}:{{ settings.https_port }};
{%- endfor %}
    ssl_preread on;
    proxy_pass $stream_proxy;
    proxy_protocol on;
  }
  server {
    # https stream proxy protocol to alpn https stream redirector
    listen {{ settings.alpn_proxy }} proxy_protocol;
    proxy_pass {{ settings.alpn_endpoint }};
    # proxy_protocol breaks openssl s_server for acme.sh letsencrypt ALPN challenge
    proxy_protocol off;
  }

{{ linesplit(settings.custom.nginx.stream, 2) }}
}

http {
  sendfile on; # performance, default is off
  tcp_nopush on; # performance, default is off
  tcp_nodelay on; # performance, default is on
  keepalive_timeout 65; # the default of dpkg-dist
  types_hash_max_size 2048; # default is 1024
  server_tokens off; # minimal server information

  # wanted max upload size, 0=disabled
  client_max_body_size {{ settings.client_max_body_size }};


  ### SSL Settings, generated 2019-11-08
  # https://ssl-config.mozilla.org/#server=nginx&server-version=1.14.0&config=intermediate&openssl-version=1.1.1
  # Firefox 27, Android 4.4.2, Chrome 31, Edge, IE 11 on Windows 7, Java 8u31, OpenSSL 1.0.1, Opera 20, and Safari 9
  # one certificate (chain) with possible multiple SAN's
  ssl_certificate {{ settings.cert_dir }}/{{ settings.ssl_chain_cert }};
  ssl_certificate_key {{ settings.cert_dir }}/{{ settings.ssl_key }};
  # Diffie-Hellman parameter for DHE ciphersuites, recommended >= 2048 bits
  ssl_dhparam {{ settings.cert_dir }}/{{ settings.ssl_dhparam }};
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:10m; # about 40000 sessions
  ssl_session_tickets off;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
  ssl_prefer_server_ciphers off;
  # OCSP Stapling: fetch OCSP records from URL in ssl_certificate and cache them
  ssl_stapling on;
  ssl_stapling_verify on;

  # default charset
  charset utf-8;

  # mime type setup
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  ### gzip settings
  gzip on;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_min_length 1100;
  gzip_types text/css text/javascript text/xml text/plain text/x-component application/javascript application/x-javascript application/json application/xml application/rss+xml font/truetype application/x-font-ttf font/opentype application/vnd.ms-fontobject image/svg+xml;

  # XXX Streaming Response
  # to return streaming responses from an upstream, the upstream response must include:
  # "X-Accel-Buffering": "no" in the HEADER. if this is not possible, include
  # "uwsgi_buffering off;" before uwsgi_pass and "proxy_buffering off;" before proxy_pass

  # XXX Websocket Support
  # websocket support can be configured by inserting the followin per location
  # "proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade;"
  map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
  }

  # ssl client cert mapping for client_issuer_dn
  map $ssl_client_i_dn $reject_ifnot_issuer_domain {
    default 1;
    CN={{ settings.domain }} 0;
  }

  ### Geoip Settings
{%- if settings.geoip.enabled %}
  {%- set provider = settings.geoip_provider[settings.geoip.provider] %}
  geoip2 {{ provider.database }} {
  {%- for k,v in provider.fields.items() %}
    ${{ k }} {{ v.select }};
  {%- endfor %}
  }
{%- endif %}

  ### Rate Limit Settings
{%- if settings.ratelimit.enabled %}
  limit_req_zone  $binary_remote_addr zone=flood:10m rate={{ settings.ratelimit.reqs_per_second }}r/s;
  limit_req_zone  $binary_remote_addr zone=bot:10m rate={{ settings.ratelimit.reqs_per_minute }}r/m;
  limit_conn_zone $binary_remote_addr zone=conn2ip:10m;
  limit_req_status 429;
  limit_conn_status 429;
  {%- if settings.ratelimit.global %}
{{ set_ratelimit() }}
  {%- endif %}
{%- endif %}

  ### Prometheus Metrics
{% if settings.metrics.prometheus %}
  lua_shared_dict prometheus_metrics 10M;
  lua_package_path "/etc/nginx/lua_prometheus/?.lua;;";
  init_worker_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")
    metric_requests = prometheus:counter(
      "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
    metric_latency = prometheus:histogram(
      "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
    metric_connections = prometheus:gauge(
      "nginx_http_connections", "Number of HTTP connections", {"state"})
  }
  log_by_lua_block {
    metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
    metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
  }
{%- endif %}

  ### Logging Settings
  # define a access_log format compatible with netdata
  log_format netdata  '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '$request_length $request_time $upstream_response_time '
                      '"$http_referer" "$http_user_agent" '
                      '"$ssl_client_s_dn" $ssl_client_verify';
  access_log /var/log/nginx/access.log netdata;
  error_log /var/log/nginx/error.log warn;

  # include config from conf.d directory
  # include /etc/nginx/conf.d/*.conf;
{{ linesplit(settings.custom.nginx.http, 2) }}

  ### upstreams
  {%- for upstream in settings.upstream %}
  # {{ upstream.protocol|d('http') }}
  upstream {{ upstream.name }} {
    server {{ upstream.server }};
  }
  {%- endfor %}

  {% if settings.metrics.buildin %}
  ### localhost http server, for nginx status, no requests from outside will reach it
  server {
    listen {{ settings.stub_status_endpoint }};
    location /stub_status {
        # make nginx stub_status available on localhost, do not log access
        stub_status;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
  }
  {%- endif %}

  {% if settings.metrics.prometheus %}
  ### localhost http server, for nginx status, no requests from outside will reach it
  server {
    listen {{ settings.prometheus_endpoint }};
    access_log off;
    allow 127.0.0.1;
    deny all;
    location /metrics {
      content_by_lua_block {
        metric_connections:set(ngx.var.connections_reading, {"reading"})
        metric_connections:set(ngx.var.connections_waiting, {"waiting"})
        metric_connections:set(ngx.var.connections_writing, {"writing"})
        prometheus:collect()
      }
    }
  }
  {%- endif %}

  ### public http server, for redirecting to https
  server {
    # http (from public http port 80) is redirected to https (port 443)
{%- for ip in settings.listen_ip %}
    listen {{ ip }}:{{ settings.http_port }};
{%- endfor %}
    location / {
      # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
      return 301 https://$host$request_uri;
    }
  }

  ### public https://{{ settings.domain }} server
  server {
    # https (from public port 443) is redirect to localhost:8443 (if not ALPN)
    listen {{ settings.main_endpoint }} default_server ssl http2 proxy_protocol;
    server_name {{ settings.domain }};

    # define how to detect the real client address
    # define the header the downstreams use for client address information
    # see http://nginx.org/en/docs/http/ngx_http_realip_module.html
    set_real_ip_from {{ settings.set_real_ip_from }};
    real_ip_header proxy_protocol;
    real_ip_recursive on;

{{ set_header(settings.header|d(false), settings.default_header, 4) }}
{{ client_cert(settings.client_cert_verify|d(false), settings.client_cert_mandatory|d(false)) }}
{{ set_proxy_geoip_header(4) }}

{%- if settings.ratelimit.host %}
{{ set_ratelimit() }}
{%- endif %}

{%- if settings.oauth2proxy is defined and settings.oauth2proxy.enabled|d(false) %}
{{ oauth2proxy_location(path= settings.oauth2proxy.path|d("/oauth2proxy"),
    proxy_name= settings.oauth2proxy.upstream|d("oauth2proxy")) }}
{%- endif %}

    # include default proxy and uwsgi config
    include /etc/nginx/proxy_params;
    include /etc/nginx/uwsgi_params;
{{ linesplit(settings.custom.nginx.host, 4) }}

    # maintenance page
    error_page 503 /{{ salt['file.basename'](settings.maintenance_target) }};
    location /{{ salt['file.basename'](settings.maintenance_target) }} {
      root {{ salt['file.dirname'](settings.maintenance_target) }};
    {# XXX add_header inside location DELETES ALL previously defined headers #}
{{ set_header(settings.header|d(false), settings.default_header, 6) }}
      add_header Retry-After 30 always;
      internal;
    }

    ### location
    # location /robots.txt { alias /etc/nginxrobots.txt; }
    # location /static/ { root /var/www; }
{%- for loc in settings.location %}
    location {{ loc.source }} {
  {%- if loc.source == '/' %}
      if (-f {{ settings.maintenance_target }}) { return 503; }
  {%- endif %}
  {%- if loc.oauth2proxy_auth_request|d(false) %}
{{ oauth2proxy_access(auth= settings.oauth2proxy.path|d("/oauth2proxy")) }}
  {%- endif %}
  {%- if loc.keep_header|d(false) %}
{{ set_header(settings.header|d(false), settings.default_header, 6) }}
  {%- endif %}
{{ linesplit(loc.target, 6) }};
    }
{%- endfor %}

  }

  ### public https server for missing SNI or unknown servername, returns 404
  server {
    listen {{ settings.main_endpoint }} ssl http2 proxy_protocol;
    server_name _;
    ssl_certificate {{ settings.ssl_invalid_full_cert_path }};
    ssl_certificate_key {{ settings.ssl_invalid_key_path }};
    return 404 Invalid Hostname;
  }

  ### public https servers for virtualhosts
{%- for vhost in settings.host %}
  server {
    listen {{ settings.main_endpoint }} ssl http2 proxy_protocol;
    server_name {{ vhost.domain }};
  {%- for virtual in settings.virtual_hosts %}
    {%- set virt_list = virtual.split(' ') %}
    {%- if vhost.domain in virt_list %}
    ssl_certificate {{ settings.cert_dir }}/vhost/{{ virt_list|first }}/{{ settings.ssl_chain_cert }};
    ssl_certificate_key {{ settings.cert_dir }}/vhost/{{ virt_list|first }}/{{ settings.ssl_key }};
    {%- endif %}
  {%- endfor %}

    set_real_ip_from {{ settings.set_real_ip_from }};
    real_ip_header proxy_protocol;
    real_ip_recursive on;

{{ set_header(vhost.header|d(false), settings.default_header, 4) }}
{{ client_cert(vhost.client_cert_verify|d(false), vhost.client_cert_mandatory|d(false)) }}
{{ set_proxy_geoip_header(4) }}

  {%- if settings.ratelimit.enabled and vhost.ratelimit|d(false) %}
{{ set_ratelimit() }}
  {%- endif %}

  {%- if vhost.oauth2proxy is defined and vhost.oauth2proxy.enabled|d(false) %}
{{ oauth2proxy_location(path= vhost.oauth2proxy.path|d("/oauth2proxy"),
    proxy_name= vhost.oauth2proxy.upstream|d("oauth2proxy")) }}
  {%- endif %}

    include /etc/nginx/proxy_params;
    include /etc/nginx/uwsgi_params;
  {%- if vhost.custom is defined %}
{{ linesplit(vhost.custom, 4) }}
  {%- endif %}

  {%- for loc in vhost.location|d([]) %}
    location {{ loc.source }} {
    {%- if loc.oauth2proxy_auth_request|d(false) %}
{{ oauth2proxy_access(auth= vhost.oauth2proxy.path|d("/oauth2proxy")) }}
    {%- endif %}

    {%- if loc.keep_header|d(false) %}
{{ set_header(vhost.header|d(false), settings.default_header, 6) }}
    {%- endif %}
{{ linesplit(loc.target, 6) }};
    }
  {%- endfor %}
  }
{%- endfor %}
}
