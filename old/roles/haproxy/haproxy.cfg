global
  #log /dev/log local0
  chroot /var/lib/haproxy
  user haproxy
  group haproxy
  daemon
  # set default parameters to the modern configuration
  # https://mozilla.github.io/server-side-tls/ssl-config-generator/ HAProxy 1.5, Modern, Openssl 1.0.1f, HSTS enabled
  tune.ssl.default-dh-param 2048
  ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK


defaults
  mode    http
  log     global

  option  httplog
  option  dontlognull

  timeout http-request    5s
  timeout connect         5s
  timeout http-keep-alive 10s
  timeout check           10s
  timeout queue           1m
  timeout client          1m
  timeout server          1m
  # Long timeout for WebSocket connections.
  timeout tunnel          30m

  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http


frontend incoming_http
  # listen to plain http
  bind {{ serve }}:80

  # insert "X-Forwarded-For" and "Proto" in header
  reqadd X-Forwarded-Proto:\ http
  option forwardfor

  # redirect to https if hostname in list
{% for name in redirect_to_http_ssl %}
  redirect scheme https if { hdr(host) -i {{ name }} }
{% endfor %}

  default_backend incoming_http


backend incoming_http
  # connect to backend server if in list
{% for name, entry in http_to_http.iteritems() %}
  use-server {{ name }}_{{ entry['port'] }} if { hdr(host) -i {{ name }} }
  server     {{ name }}_{{ entry['port'] }} {{ entry['ip'] }}:{{ entry['port'] }} check weight 0
{% endfor %}

  # if no matching server is found, we delegate to the local sorry page
  server http_503 127.0.0.10:5080 send-proxy


frontend http_503
  bind 127.0.0.10:5080 accept-proxy
  default_backend http_503

backend http_503
  errorfile 503 /etc/haproxy/errors/no-server.http


frontend incoming_https
  # tcp listen to https, snoop sni
  mode tcp
  bind {{ serve }}:443
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
  default_backend incoming_https

backend incoming_https
  mode tcp

  # iterate over the list of https backend servers and connect to them
{% for name, entry in http_ssl_to_http_ssl.iteritems() %}
  use-server {{ name }}_{{ entry['port'] }} if { req_ssl_sni -i {{ name }} }
  server     {{ name }}_{{ entry['port'] }} {{ entry['ip'] }}:{{ entry['port'] }} {{ entry['options].iteritems }} check weight 0
{% endfor %}

  # if no matching server is found, we delegate to the switch_sni frontend which does ssl termination and proxing to http server
  server ssl_sni_terminator 127.0.0.10:5443 send-proxy


frontend ssl_sni_terminator
  # sni switching https ssl termination proxy
  mode http

  # disallow sslv3 and tlsv1.0,
  # use the proxy information from incoming_https,
  # use a directory where all certs are stored and let haproxy pick one using sni
  # do not include "no-tlsv10" to bind because android < 4.4, ie < 11 does not support it!
  bind 127.0.0.10:5443 accept-proxy ssl no-sslv3 crt /etc/haproxy/crt/

  # insert "X-Forwarded-For" and "Proto" in header
  option forwardfor
  reqadd X-Forwarded-Proto:\ https

  default_backend ssl_sni_terminator

backend ssl_sni_terminator
  mode http

  # iterate over the list of http backend servers and connect to them
  #acl has_blog_uri path_beg -i /blog
  #redirect location https://www.test.com if !has_blog_uri
  # use server x if has_blog_uri
{% for name, entry in http_ssl_to_http.iteritems() %}
{% if name != "default" %}
  use-server {{ name }}_{{ entry['port'] }} if { hdr(host) -i {{ name }} }
  server     {{ name }}_{{ entry['port'] }} {{ entry['ip'] }}:{{ entry['port'] }} check weight 0
{% endif %}
{% endfor %}

{% if defined http_ssl_to_http['default'] %}
  {% do set entry= http_ssl_to_http['default'] %}
  server default_{{ entry['port'] }} {{ entry['ip'] }}:{{ entry['port'] }} check weight 0
{% endif %}

# if no matching server is found, we delegate to the local sorry page
server http_503 127.0.0.10:5080 send-proxy
