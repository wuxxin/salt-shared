{% load_yaml as defaults %}

user: {{ salt['cmd.run_stdout']('getent passwd 1000 | cut -d: -f1', python_shell=True)|d('gitops') }}
src_dir: {{ grains['project_basepath'] }}
env_file: /etc/gitops.env
var_dir: /var/lib/gitops

timer:
  enabled: false
  oncalendar: '*-*-* 23:30:00'

webhook:
  enabled: false
  ip: 127.0.0.1
  port: 5555
  default_command: /usr/local/bin/webhook-gitops-update.sh
  hooks: []
  # - name: activatepath
  #   type: one of [gogs_push_this_branch, github_push_this_branch, gitea_push_this_branch]
  #   branch: default= master
  #   command: default= default_command
  #   secret: eg. output of openssl rand -base64 12

git:
  source: ssh://git@git.domain.top:22/user/project.git
  branch: master
  ssh_id:
  ssh_id_pub:
  ssh_known_hosts:
  gpg_id:

{# set sentry:dsn for reporting to sentry #}
sentry:
  dsn:

maintenance_template: /var/lib/gitops/maintenance.template.html
maintenance_target: /var/lib/gitops/maintenance/maintenance.html

{# certfiles validity days left. added via gitops-cert-add-check.sh #}
cert_warn_days: 28
cert_err_days: 3
cert_watchlist_target: /var/lib/gitops/cert_watchlist.txt

{# onfailure_service: List of systemd service names (without ".service")
   to be added as onfailure to gitops-service-failed #}
onfailure_service: []

update:
  unattended_reboot: true
  validate_cmd: "/usr/local/sbin/execute-saltstack.sh . state.highstate mock=true > /dev/null"
  before_cmd: /usr/bin/true
  update_cmd: "/usr/local/sbin/execute-saltstack.sh . state.highstate"
  after_cmd: /usr/bin/true
  finish_cmd: /usr/bin/true

{% endload %}

{% set settings=salt['grains.filter_by']({'default': defaults},
  grain='default', default= 'default', merge= salt['pillar.get']('gitops', {})) %}

{% if settings.git.branch is not defined %}
  {% do settings.git.update({ 'branch': 'master' }) %}
{% endif %}

{% if settings.home_dir is not defined %}
  {% do settings.update(
    { 'home_dir': salt['cmd.run']('getent passwd '+
      settings.user+ ' | cut -d: -f6', python_shell=True) } ) %}
{% endif %}
