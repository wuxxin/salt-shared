#!/bin/bash

env_usage() {
    cat <<"EOF"
Usage: . $0

    get appliance config (yaml) from supported infrastructure,
    convert yaml to environment variables and activate in environment
    return != 0 on error

Examples:
    + read userdata yaml into variable x
        `. env.include; x=$(get_userdata)`

    + read userdata yaml and make a bash "export x=y" list
        `. env.include; x=$(userdata_to_list . --prefix export\ )`

    + read userdata from ENV_YML location, filter, convert, add to current env
        `. env.include; ENV_YML=/run/active-env.yml userdata_to_env appliance`

Locations searched (in order) for environment:
    + from salt-call pillar.items if environment variable ENV_YML=pillar
    + absolute filepath set via environment variable ENV_YML
    + local file /app/env.yml
    + drive with label cidata (cloud-init: no-cloud config)
    + drive with label config-2 (cloud-init: openstack config)
    + aws-ec2 (amazon elastic computing cloud) meta-data server
    + gce (google compute engine) meta-data server

Known-issues:
    + needs root, if it tries to mount could-init iso's

EOF
}


curl_check200() {
    local data
    local ret
    data=$(curl --noproxy "*" --max-time 3 -s -I -X GET "$@")
    ret=$?
    if test $ret -ne 0; then
        return $ret
    fi
    printf "%s" "$data" | head -1 | grep -q '200 OK'
    return $?
}

curl_get() {
    curl --noproxy "*" --max-time 3 -s "$@"
}

lfstrlf() {
    printf "%b" "\n$1\n"
}


extract_from_drive() {
    # call(lbl=label, data_fn=data-filename)
    local lbl=$1
    local data_fn=$2
    local dev=/dev/disk/by-label/$lbl
    local mp=$(lsblk -n -o MOUNTPOINT $dev)
    local unmount_after_read=false
    local found_user_data=false
    local data

    if test "$mp" = ""; then
        unmount_after_read=true
        mkdir -p /mnt/$lbl
        mount -r LABEL=$lbl /mnt/$lbl
        mp=$(lsblk -n -o MOUNTPOINT $dev)
    fi
    if test ! -e $mp/$data_fn; then
        data=$(lfstrlf "USERDATA_TYPE: error\nUSERDATA_ERR: could not find $data_fn on filesystem with label $lbl")
    else
        data="$(cat $mp/$data_fn)$(lfstrlf USERDATA_TYPE:\ $lbl)"
        found_user_data=true
    fi
    if test $unmount_after_read; then
        umount $mp
    fi
    printf "%s" "$data"
    if test $found_user_data; then
        return 0
    else
        return 1
    fi
}


get_userdata() {
    local ret=1
    local data
    if test "$ENV_YML" = "pillar"; then
        data="$(salt-call pillar.items --out=yaml)$(lfstrlf USERDATA_TYPE:\ pillar)"
        ret=$?
    fi
    if test $ret -ne 0; then
        if test -e "$ENV_YML"; then
            data="$(cat $ENV_YML)$(lfstrlf USERDATA_TYPE:\ local)"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test -e /app/env.yml; then
            data="$(cat /app/env.yml)$(lfstrlf USERDATA_TYPE:\ local)"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test -e /dev/disk/by-label/cidata; then
            data=$(extract_from_drive cidata user-data)
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test -e /dev/disk/by-label/config-2; then
            data=$(extract_from_drive config-2 openstack/latest/user_data)
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test $(curl_check200 http://169.254.169.254/latest/user-data); then
            data="$(curl_get  http://169.254.169.254/latest/user-data)$(lfstrlf USERDATA_TYPE:\ ec2)"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        if test $(curl_check200 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/user-data); then
            data="$(curl_get -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/user-data)$(lfstrlf USERDATA_TYPE:\ gce)"
            ret=$?
        fi
    fi
    if test $ret -ne 0; then
        data=$(lfstrlf "USERDATA_TYPE: error\nUSERDATA_ERR: did not find userdata, no provider left")
    fi
    printf "%s" "$data"
    return $ret
}


userdata_to_list() {
    # call(tree_filter [optional arguments for flatyaml.py])
    local userdata_yaml
    local userdata_env
    local ret

    userdata_yaml=$(get_userdata)
    if test $? -ne 0; then
        echo -n "Error reading userdata: "
        printf "%s" "$userdata_yaml"| grep USERDATA_ERR
        return 1
    fi
    userdata_env=$(printf "%s" "$userdata_yaml" | flatyaml.py "$@")
    ret=$?
    if test $ret -ne 0; then
        echo "Error converting to env: $ret" 1>&2
        return $ret
    fi
    printf "%s" "$userdata_env"
}


userdata_to_env() {
    # call(tree_filter=".")
    local userdata_yaml
    local userdata_env
    local ret
    local fifoname
    local tree_filter="$1"
    if test "$tree_filter" = ""; then tree_filter="."; fi

    userdata_yaml=$(get_userdata)
    if test $? -ne 0; then
        echo -n "Error reading userdata: "
        printf "%s" "$userdata_yaml"| grep USERDATA_ERR
        return 1
    fi
    userdata_env=$(printf "%s" "$userdata_yaml" | flatyaml.py --prefix export\  "$tree_filter")
    ret=$?
    if test $ret -ne 0; then
        echo "Error converting userdata to env: $ret" 1>&2
        return $ret
    fi
    fifoname=$(mktemp -p /tmp -u -t env_include_XXXXXX).fifo
    mkfifo -m 0600 $fifoname
    printf "%s" "$userdata_env" > $fifoname &
    . $fifoname
    ret=$?
    rm $fifoname
    return $ret
}
