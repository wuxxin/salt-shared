{% load_yaml as defaults %}

store:
  nspawn_config: /etc/systemd/nspawn
  nspawn_run: /run/systemd/nspawn
  nspawn_target: /var/lib/machines
  nspawn_volume: /var/lib/volumes/nspawn
  mkosi_config: /etc/mkosi
  mkosi_cache: /var/cache/mkosi
  mkosi_target: /var/lib/mkosi

image:
  {% for distro in ['xenial', 'bionic', 'focal'] %}
  {{ distro }}:
    mkosi:
      Distribution:
        Distribution: ubuntu
        Release: {{ distro }}
        Repositories: main,universe,multiverse,restricted
      Output:
        Format: directory
        Bootable: false
        Hostname: {{ distro }}
      Packages:
        PostInstallationScript: mkosi.postinst
        NSpawnSettings: mkosi.nspawn
        Packages:
        - lsb-release
        - tzdata
        - iproute2
        - iputils-ping
        - openssh-client
        - openssh-server
        - python3
      Host: {}
      Validation: {}

    machine:
      # enabled: if false, service will not get started and will be stopped if running
      enabled: true

      # environment: dict of key,value pairs to be included in the target environment
      environment: {}

      nspawn:
        Exec:
          Boot: on
          LinkJournal: try-guest
          PrivateUsers: pick
          ResolvConf: copy-host
        Files:
          PrivateUsersChown: on
        Network:
          Private: on
          VirtualEthernet: on
          Zone: nspawn

      postinst:
        # after creation of machine, a script can be copied to and executed
        # on the target machine once. the source will be copied to /tmp/machine.postinst
        # and called using $0 <userid> <groupid> <username> <homedir>
        source: salt://systemd/nspawn/machine.postinst

        # defaults arguments for the postinst script
        args: ['1000' , '1000', 'app', '/home/app']

        # ssh keys string authorized for root and <userid>,
        # will be created at /tmp/authorized_keys for usage in postinst
        authorized_keys: ""
  {% endfor %}

{% endload %}


{%- set settings = salt['grains.filter_by']({'default': defaults},
  grain='default', default= 'default', merge= salt['pillar.get']('systemd:nspawn', {})) %}
