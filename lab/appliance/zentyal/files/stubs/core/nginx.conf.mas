<%doc>
   Template to set the nginx configuration file for the Web administration

Parameters:

    port - Int the listening port.
    tmpdir - String the path to the WebAdmin temporary directory.
    zentyalconfdir - String the path to the WebAdmin configuration folder.
    includes - Array. The list of configuration files to include.
    servers - Array The list of configuration files with servers definition.
    restrictedresources - Array containing a hash ref structure which contains
                          the following elements:
                          - allowedIPs - array ref containing the allowed IPs
                                         for accessing this resource.
                          - name       - String the location name.
# FIXME: unhardcode paths passing them as args...
</%doc>
<%args>
    $port
    $tmpdir
    $zentyalconfdir
    $caFile
    @includes => ()
    @servers => ()
    @restrictedresources => ()
</%args>
<%init>
my %sectionrestrictions = ();
</%init>
<%perl>
my %dumpedrestricted = ();
my @nginxsections = ('/data/', '/dynamic-data/', '');
if ( $#restrictedresources > 0 ) {
    foreach my $section (@nginxsections) {
        foreach my $resource (@restrictedresources) {
            my $location = $resource->{name};
            if ((not exists $dumpedrestricted{$location}) and
                ($location =~ /^$section/)) {
                $dumpedrestricted{$location} = 1;
                my @allowIPs = @{ $resource->{allowedIPs} };
                my $foundNobody = grep { $_ eq 'nobody' } @allowIPs;
                $sectionrestrictions{$section}{location} = $location;
                $sectionrestrictions{$section}{foundNobody} = $foundNobody;
                $sectionrestrictions{$section}{allowIPs} = \@allowIPs;
            }
        }
    }
}
</%perl>
user www-data;
worker_processes 4;
daemon off;
pid /var/lib/zentyal/tmp/nginx.pid;

events {
    worker_connections 768;
    # multi_accept on;
}

http {

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 50m;

    server_names_hash_bucket_size 64;
    server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    error_log /var/log/zentyal/error.log;

    # log_format combined '$remote_addr - $remote_user  [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"'
    # FIXME: This log format is missing %{forensic-id}n from Apache, is needed?

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    map $ssl_client_s_dn $ssl_client_s_dn_o {
        default           "";
        ~/O=(?<O>[^/]+) $O;
    }

    map $ssl_client_s_dn $ssl_client_s_dn_cn {
        default           "";
        ~/CN=(?<CN>[^/]+) $CN;
    }

    map $ssl_client_i_dn $ssl_client_i_dn_o {
        default           "";
        ~/O=(?<O>[^/]+) $O;
    }

    server {
        listen <% $port %>;

        ssl on;
        ssl_certificate <% $zentyalconfdir %>ssl/ssl.pem;
        ssl_certificate_key <% $zentyalconfdir %>ssl/ssl.pem;
        ssl_dhparam /app/etc/dhparam.pem;
% if ($caFile) {
        ssl_client_certificate <% $caFile %>;
        ssl_verify_client optional;
        ssl_verify_depth 1;
% }

        ssl_session_timeout 8h;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;

        # modern configuration. tweak to your needs.
        ssl_protocols TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;
        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;

        access_log /var/log/zentyal/access.log;

        root /usr/share/zentyal/www;

        # First attempt to serve request as file, then
        # as directory, then fall back to proxy.
        try_files $uri @proxy;

        error_page 502 /errors/502.html;
        location = /errors/502.html {
           root /usr/share/zentyal/www;
        }

        location /data/ {
<& .restricted, restrictions => $sectionrestrictions{'/data/'} &>
            root /usr/share/zentyal/www;
            rewrite  ^/data/(.*)$  /$1  break;
            return   403;
        }

        location /dynamic-data/ {
<& .restricted, restrictions => $sectionrestrictions{'/dynamic-data/'} &>
            root /var/lib/zentyal/dynamicwww/;
            rewrite  ^/dynamic-data/(.*)$  /$1  break;
            return   403;
        }
<& .restricted, restrictions => $sectionrestrictions{''} &>

        location @proxy {
            uwsgi_pass unix:///run/zentyal-webadmin/webadmin.sock;

            uwsgi_read_timeout 180;

            uwsgi_param QUERY_STRING $query_string;
            uwsgi_param REQUEST_METHOD $request_method;
            uwsgi_param CONTENT_TYPE $content_type;
            uwsgi_param CONTENT_LENGTH $content_length;
            uwsgi_param REQUEST_URI $request_uri;
            uwsgi_param PATH_INFO $document_uri;
            uwsgi_param DOCUMENT_ROOT $document_root;
            uwsgi_param SERVER_PROTOCOL $server_protocol;
            uwsgi_param REMOTE_ADDR $remote_addr;
            uwsgi_param REMOTE_PORT $remote_port;
            uwsgi_param SERVER_ADDR $server_addr;
            uwsgi_param SERVER_PORT $server_port;
            uwsgi_param SERVER_NAME $server_name;
            uwsgi_param HTTP_X_FORWARDED_PROTO https;
        }
% foreach my $includeFile (@includes) {

        include <% $includeFile %>;
% }
    }

% foreach my $serverFile (@servers) {

    include <% $serverFile %>;
% }
}
<%def .restricted>
<%args>
$restrictions
</%args>
% if ( $restrictions ) {
            location <% $restrictions->{location} %> {
%     unless ( $restrictions->{foundNobody} ) {
%         foreach my $ip (@{$restrictions->{allowIPs}}) {
                allow <% $ip %>;
%         }
%     }
                deny all;
            }
% }
</%def>
