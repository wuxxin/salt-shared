{% import_yaml "backup/external.yml" as backup_external %}
{% set default_test_repository= '/opt/backup-test' %}

{% load_yaml as defaults %}
enabled: true

# backup run user
user: ""

# readall_privilege = true turns on: CAP_DAC_READ_SEARCH for user
readall_privilege: false

# backup target and secret key
repository_url: {{ default_test_repository }}
repository_key:

# extra env for backup call
env: {}

# if repository_url.startswith('sftp'): repository_ssh_id for ssh connection
ssh_id: ""
ssh_id_pub: ""

basedir: /
# include the following files/dirs
includes: []
# exclude some files/dirs inside this directories
excludes: []

hooks:
  pre_backup: []
  post_backup: []

# timer based invocation default, once per day
timer: *-*-* 23:30:00

# first job max time on new repository, eg: 48h (2880min) equals 3,4TB using 20mb/s
initial_job_runtime: 2880min

# max time for fullbackup, eg: 8hours equals 562GB using 20mb/s
max_job_runtime: 480min

# maximum backup storage to expect, -1 (default) to disable checking for current usage
max_backup_storage: -1

# age of oldest data change to keep
forget: keep-within 1y6m

# interval in days to run restic forget, prune and check
housekeeping_interval_days: 7

# calculate used space on backup storage as post backup step
count_target_data_size: true

# sum the local filesizes of the backuped data as post backup step
count_local_data_size: false

# systemd dependencies
systemd:
  after:
  wants:
  requires:
  onfailure:

# root only readable, will be injected in target user environment
env_file: /etc/systemd/system/backup.env

# directory used if /usr/local/app-library.sh (used for tags) does not exist
tag_dir: /etc/backup/tags

default_ssh_port: 22
default_test_repository: {{ default_test_repository }}

{# external software #}
external: {{ backup_external.objects }}
{% endload %}


{%- set settings = salt['grains.filter_by']({'default': defaults},
  grain='default', default= 'default', merge= salt['pillar.get']('backup', {})) %}

{# expand ##version## in field external.*.download #}
{% for n,v in settings.external.items() %}
  {% set download=settings.external[n]['download']|regex_replace('##version##', v.version) %}
  {% do settings.external[n].update( {'download': download} ) %}
  {% if settings.external[n]['hash_url'] %}
    {% set hash_url=settings.external[n]['hash_url']|regex_replace('##version##', v.version) %}
    {% do settings.external[n].update( {'hash_url': hash_url} ) %}
  {% endif %}
{% endfor %}
