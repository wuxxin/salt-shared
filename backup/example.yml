# backup run user
user: backup

# backup target and secret key
repository_url:
repository_key:

# extra env for backup call and hooks
env:
  MOUNTPOINTS: '/mnt/data /mnt/whatever'
  DATABASES: 'mydatabase anotherdb'
  PGDUMP_DIR: '/var/backups/pgdump'

# include the following files/dirs
includes:
  - /etc
  - /var
# exclude some files/dirs inside this directories
excludes: []

# age of oldest data change to keep
forget: keep-within 1y6m

# systemd dependencies
systemd:
  wants: postgresql

hooks:
  pre_backup:
    - name: assure_mounted_and_not_empty
      desc: assure x is mounted if external mount and is not empty, needs env $MOUNTPOINTS
      cmd: |
        for i in $MOUNTPOINTS; do
          if grep -q "$i" /etc/fstab; then
              if ! mountpoint -q "$i"; then
                  sentry_entry error "App Backup" "backup error: Mount at Mountpoint $i is not mounted"
                  exit 1
              fi
          fi
          files_found=$(find "$i" -mindepth 1 -path "$i/lost+found" -prune -o -type f -exec echo true \; -quit)
          if test "$files_found" != "true"; then
              sentry_entry error "App Backup" "backup error: dir $i is empty"
              exit 1
          fi
        done

    - name: dump_postgres_databases
      desc: dump selected postgresql databases, needs env $DATABASES, $PGDUMP_DIR
      cmd: |
        for i in $DATABASES; do
          psql -lqt | cut -d \| -f 1 | grep -qw "$i" && err=$? || err=$?
          if test $err -ne 0; then
              sentry_entry error "App Backup" "backup error: Database $i does not exist"
              exit 1
          fi
          dbdump="$PGDUMP_DIR/$i.pgdump.gz"
          /usr/bin/pg_dump --encoding='utf-8' --format=custom -Z0 -d "$i" | \
              /bin/gzip --rsyncable > "${dbdump}.new" && err=$? || err=$?
          duration_pg_dump=$(( $(date +%s) - duration_start ))
          if test "$err" -ne 0; then
              sentry_entry error "App Backup" "backup error: could not create database dump" \
                  $(unit_json_status)"
              exit 1
          fi
          mv "${dbdump}.new" "${dbdump}"
        done

    - name: zfs_create_snapshot
      cmd: |
        if snapshot_exist backup_service; then
            bytes_written = $(zfs get -Hp -o value written $ii)
            if test $bytes_written -gt $bytes_minimum; then
              if exist old tail snapshot delete
              rename snapshot head to tail
              new snapshot head from tail
              mount snapshot to /backup
            else
              return 2 for empty backup
            fi

  post_backup:
    - name: zfs_prune_snapshots
      cmd: |
        remove all but the last used snapshot of backup
