[Unit]
Description=Backup Service using Restic {{ '(Initial Run)' if instance_type == 'initial' }}
After=network-online.target {{ settings.systemd.after }}
Wants=network-online.target {{ settings.systemd.wants}}
{% if settings.systemd.requires %}
Requires={{ settings.systemd.requires }}
{% endif %}
{% if settings.systemd.onfailure %}
OnFailure={{ settings.systemd.onfailure }}
{% endif %}

[Service]
Type=oneshot
{% if instance_type = 'initial' %}
TimeoutStartSec={{ settings.initial_job_runtime }}
{% else %}
TimeoutStartSec={{ settings.max_job_runtime }}
{% endif %}
User={{ settings.user }}
Group={{ settings.user }}
Environment=UNITNAME=%n
Environment=HOME={{ settings.home_dir }}
Environment=USER={{ settings.user }}
EnvironmentFile={{ settings.env_file }}
WorkingDirectory={{ settings.home_dir }}
PassEnvironment=UNITNAME HOME USER RESTIC_REPOSITORY RESTIC_PASSWORD {% if settings.env %}{% for k,v in settings.env.items() %}{{ k }} {% endfor %}{% endif %}

{% if instance_type == 'initial' %}
ExecStart=/usr/bin/bash -c \
  '
  last_start=get_tag backup.initial.starttime 0
  set_tag backup.initial.starttime ${unixtime}
  /usr/local/lib/backup-service.sh --from-systemd-service \
  set_tag backup.initial.finished ${unixtime}
  '

{% else %}
ExecStart=/usr/bin/bash -c \
  ' \
  if tag_is_set backup.initial.finished; then \
    /usr/local/lib/backup-service.sh --from-systemd-service \
  else \
    systemctl start --no-block backup-initial \
  fi \
  '

{% endif %}
