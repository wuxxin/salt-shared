From e67d5d40a61fa5ba32dfabfddd183dc6993bfa13 Mon Sep 17 00:00:00 2001
From: Jakub Skokan <jakub.skokan@havefun.cz>
Date: Sun, 16 Jun 2019 11:26:50 +0200
Subject: [PATCH 09/13] [vpsAdminOS] zfs share: add option -r to recursively
 share descendant filesystems

Signed-off-by: Jakub Skokan <jakub.skokan@havefun.cz>
---
 cmd/zfs/zfs_main.c   | 60 ++++++++++++++++++++++++++++++++++++++++----
 man/man8/zfs-share.8 | 12 +++++++--
 2 files changed, 65 insertions(+), 7 deletions(-)

diff --git a/cmd/zfs/zfs_main.c b/cmd/zfs/zfs_main.c
index ae71cdc88..51dde216f 100644
--- a/cmd/zfs/zfs_main.c
+++ b/cmd/zfs/zfs_main.c
@@ -328,7 +328,7 @@ get_usage(zfs_help_t idx)
 		return (gettext("\tset <property=value> ... "
 		    "<filesystem|volume|snapshot> ...\n"));
 	case HELP_SHARE:
-		return (gettext("\tshare [-l] <-a [nfs|smb] | filesystem>\n"));
+		return (gettext("\tshare [-l] <-a [nfs|smb] | [-r] filesystem>\n"));
 	case HELP_SNAPSHOT:
 		return (gettext("\tsnapshot [-r] [-o property=value] ... "
 		    "<filesystem|volume>@<snap> ...\n"));
@@ -6818,13 +6818,14 @@ static int
 share_mount(int op, int argc, char **argv)
 {
 	int do_all = 0;
+	int do_recursive = 0;
 	boolean_t verbose = B_FALSE;
 	int c, ret = 0;
 	char *options = NULL;
 	int flags = 0;
 
 	/* check options */
-	while ((c = getopt(argc, argv, op == OP_MOUNT ? ":alvo:Of" : "al"))
+	while ((c = getopt(argc, argv, op == OP_MOUNT ? ":alvo:Of" : "alr"))
 	    != -1) {
 		switch (c) {
 		case 'a':
@@ -6855,6 +6856,9 @@ share_mount(int op, int argc, char **argv)
 		case 'f':
 			flags |= MS_FORCE;
 			break;
+		case 'r':
+			do_recursive = 1;
+			break;
 		case ':':
 			(void) fprintf(stderr, gettext("missing argument for "
 			    "'%c' option\n"), optopt);
@@ -6969,9 +6973,55 @@ share_mount(int op, int argc, char **argv)
 		    ZFS_TYPE_FILESYSTEM)) == NULL) {
 			ret = 1;
 		} else {
-			ret = share_mount_one(zhp, op, flags, NULL, B_TRUE,
-			    options);
-			zfs_close(zhp);
+			if (op == OP_SHARE && do_recursive) {
+				start_progress_timer();
+				get_all_cb_t cb = { 0 };
+				get_all_state_t state = {
+				    .ga_verbose = verbose,
+				    .ga_cbp = &cb
+				};
+
+				libzfs_add_handle(&cb, zhp);
+				assert(cb->cb_used <= cb->cb_alloc);
+
+				if (zfs_iter_filesystems(zhp, get_one_dataset, &state) != 0) {
+					zfs_close(zhp);
+					if (options != NULL)
+						free(options);
+					return (1);
+				}
+
+				if (cb.cb_used == 0) {
+					zfs_close(zhp);
+					if (options != NULL)
+						free(options);
+					return (0);
+				}
+
+				share_mount_state_t share_mount_state = { 0 };
+				share_mount_state.sm_op = op;
+				share_mount_state.sm_verbose = verbose;
+				share_mount_state.sm_flags = flags;
+				share_mount_state.sm_options = options;
+				share_mount_state.sm_total = cb.cb_used;
+				pthread_mutex_init(&share_mount_state.sm_lock, NULL);
+
+				/*
+				 * libshare isn't mt-safe, so don't do the operation in parallel
+				 */
+				zfs_foreach_mountpoint(g_zfs, cb.cb_handles, cb.cb_used,
+				    share_mount_one_cb, &share_mount_state,
+				    B_FALSE);
+				ret = share_mount_state.sm_status;
+
+				for (int i = 0; i < cb.cb_used; i++)
+					zfs_close(cb.cb_handles[i]);
+				free(cb.cb_handles);
+			} else {
+				ret = share_mount_one(zhp, op, flags, NULL, B_TRUE,
+				    options);
+				zfs_close(zhp);
+			}
 		}
 	}
 
diff --git a/man/man8/zfs-share.8 b/man/man8/zfs-share.8
index 3b0ef791e..82608e081 100644
--- a/man/man8/zfs-share.8
+++ b/man/man8/zfs-share.8
@@ -39,7 +39,9 @@
 .Sh SYNOPSIS
 .Nm
 .Cm share
-.Fl a | Ar filesystem
+.Fl a |
+.Op Fl r
+.Ar filesystem
 .Nm
 .Cm unshare
 .Fl a | Ar filesystem Ns | Ns Ar mountpoint
@@ -48,13 +50,19 @@
 .It Xo
 .Nm
 .Cm share
-.Fl a | Ar filesystem
+.Fl a |
+.Op Fl r
+.Ar filesystem
 .Xc
 Shares available ZFS file systems.
 .Bl -tag -width "-a"
 .It Fl a
 Share all available ZFS file systems.
 Invoked automatically as part of the boot process.
+.It Fl r
+Share
+.Ar filesystem
+and all its descendant filesystems recursively.
 .It Ar filesystem
 Share the specified filesystem according to the
 .Sy sharenfs
-- 
2.20.1

