realm={{ settings.domain }}

# use the "TURN REST API" method for validating timelimited credentials
use-auth-secret
# Fingerprints in TURN messages are required for WebRTC
fingerprint
# The long-term credential mechanism is required for WebRTC
lt-cred-mech
static-auth-secret={{ settings.static_auth_secret }}

min-port={{ settings.udp_min_port }}
max-port={{ settings.udp_max_port }}

{% for ip_range in settings.external_ip %}
external-ip={{ ip_range }}
{% endfor %}

{% if settings.ssl %}
cert={{ settings.ssl_cert }}
pkey={{ settings.ssl_key }}
{% else %}
no-tls
no-dtls
{% endif %}

# prod; hide the software version
prod

# disable cli
no-cli

# Set this option to limit the nonce lifetime.
stale-nonce=600

# VoIP traffic is all UDP. There is no reason to let users connect to arbitrary TCP endpoints via the relay.
no-tcp-relay

# Flag that can be used to disallow peers on well-known broadcast addresses (224.0.0.0 and above, and FFXX:*).
no-multicast-peers

# All WebRTC-compatible web browsers support TLS 1.2 or later
no-tlsv1
no-tlsv1_1

# consider whether you want to limit the quota of relayed streams per user (or total) to avoid risk of DoS.
# user-quota=12 # 4 streams per video call, so 12 streams = 3 simultaneous relayed calls per user.
# total-quota=1200
{% if settings.user_quota %}
user-quota={{ settings.user_quota }}
{% endif %}
{% if settings.total_quota %}
total-quota={{ settings.total_quota }}
{% endif %}

# don't let the relay ever try to connect to private IP address ranges within your network (if any)
# given the turn server is likely behind your firewall, remember to include any privileged public IPs too.
{% for ip_range in settings.denied_peer_ip %}
denied-peer-ip={{ ip_range }}
{% endfor %}

# special case the turn server itself so that client->TURN->TURN->client flows work
# allowed-peer-ip=10.0.0.1
{% for ip_range in settings.allowed_peer_ip %}
allowed-peer-ip={{ ip_range }}
{% endfor %}
