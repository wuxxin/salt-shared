{% set ipaddr= "10.140.222.1" %}
{% set netsize= "24" %}
{% set bridge= "lxdbr0" %}
{% set pool= "default" %}

{% load_yaml as defaults %}
# Daemon settings
config:
  core.https_address: 127.0.0.1
  images.auto_update_interval: 15
{% endload %}

{% load_yaml as extended_defaults %}
# Storage pools
storage_pools:
- name: {{ pool }}
  description: LXD {{ pool }} pool
  driver: dir
  config:
    source: /var/lib/lxd/storage-pools/{{ pool }}

# self managed Network devices
networks:
- name: {{ bridge }}
  type: bridge
  config:
    ipv4.address: {{ ipaddr }}/{{ netsize }}
    ipv4.nat: true
    ipv6.address: none
    # needed parameter to prevent dns loop and point host dns to lxd for *.lxd
    raw.dnsmasq: |
        auth-zone=lxd
        dns-loop-detect

# Profiles
profiles:
- name: default
  description: Default LXD profile
  devices:
    eth0:
      nictype: bridged
      parent: {{ bridge }}
      type: nic
    root:
      path: /
      pool: {{ pool }}
      type: disk
- name: autostart
  config:
    boot.autostart: true
    boot.autostart.delay: 2
- name: nested
  config:
    security.nesting: true
- name: network_extra
  config:
    linux.kernel_modules: ip_tables,ip6_tables,netlink_diag,nf_nat,xt_conntrack,br_netfilter,nf_conntrack,ip_vs,ip_vs_rr,ip_vs_wrr,ip_vs_sh
- name: syscalls_intercept
  config:
    security.syscalls.intercept.mknod: true
    security.syscalls.intercept.setxattr: true

# Images
images:
- name: bionic
  public: true
  auto_update: true
  source:
    name: bionic/amd64
    remote: ubuntu
- name: focal
  public: true
  auto_update: true
  source:
    name: focal/amd64
    remote: ubuntu
- name: focal-daily
  public: true
  auto_update: true
  source:
    name: focal/amd64
    remote: ubuntu-daily
{% endload %}


{%- set settings = salt['grains.filter_by']({'default': defaults},
  grain='default', default= 'default', merge= salt['pillar.get']('lxd', {})) %}

{%- for section in ['storage_pools', 'networks', 'profiles', 'images'] %}
  {%- set section_org = salt['pillar.get']('lxd:'+ section, []) %}
  {%- set section_names= section_org|map(attribute='name') %}
  {%- for item in extended_defaults[section] %}
    {%- if item.name not in section_names %}
      {%- do section_org.append(item) %}
    {%- endif %}
  {%- endfor %}
  {%- do settings.update({section: section_org}) %}
{%- endfor %}
