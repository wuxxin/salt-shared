#!/usr/bin/ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :

require "fileutils"
require "yaml"

Vagrant.require_version ">= 1.6.0"

# XXX host locale environment variables are passed to guest.
# This may cause failures if the guest software do not support the host locale.
ENV["LANG"] = "en_US.UTF-8"
ENV["LC_ALL"] = ENV["LANG"]
ENV["LANGUAGE"] = "en_US:en"
ENV["LC_MESSAGES"] = "POSIX"

DEFAULT_HOSTNAME = File.basename(File.expand_path(File.dirname(__FILE__)))
DEFAULT_CLOUDDRIVE = File.join(File.dirname(__FILE__), "cidata.iso")
DEFAULT_YAML_NAME = File.join(File.dirname(__FILE__), "vagrant.yml")
DEFAULT_SETTINGS = <<-HERE
    cpus: 2
    memory: 1024
    servername: #{DEFAULT_HOSTNAME}
    clouddrive: #{DEFAULT_CLOUDDRIVE}
    lxd:
      nesting: null
      privileged: null
      ephemeral: false
      profiles: ["default"]    
    libvirt:
      management:
        network:
          name: "vagrant-libvirt"
          address: null
          mac: null
      machine:
        virtual:
          size: 10
HERE

settings = YAML.load(DEFAULT_SETTINGS)
if File.exist?(DEFAULT_YAML_NAME)
    custom_settings = YAML.load_file(DEFAULT_YAML_NAME)
    settings.deep_merge!(custom_settings)
end

Vagrant.configure("2") do |config|
    config.ssh.forward_agent = true
    config.vm.box = "ubuntu/bionic64"
    config.vm.define "appliance"
    config.vm.synced_folder ".", "/app/src", type: "rsync", create: true,
        rsync__exclude: "", rsync__auto: false,
        rsync__args: ["--verbose", "--archive", "--delete", "-z", "--links"]

    if Vagrant.has_plugin?("vagrant-gatling-rsync")
        config.gatling.rsync_on_startup = true
    end
    if Vagrant.has_plugin?("vagrant-proxyconf")
        if "#{ENV['http_proxy']}" != ""
            config.proxy.http  = "#{ENV['http_proxy']}"
        end
        if "#{ENV['lxd_http_proxy']}" != ""
            config.proxy.http  = "#{ENV['lxd_http_proxy']}"
        end
        if "#{ENV['no_proxy']}" != ""
            config.proxy.no_proxy  = "#{ENV['no_proxy']}"
        end
    end

    config.vm.provider "lxd" do |lxd|
        lxd.api_endpoint = "https://127.0.0.1:8443"
        lxd.timeout = 10
        lxd.name = nil
        lxd.nesting = settings['lxd']['nesting']
        lxd.privileged = settings['lxd']['privileged']
        lxd.ephemeral = settings['lxd']['ephemeral']
        lxd.profiles = settings['lxd']['profiles']
    end

    config.vm.provider "libvirt" do |lv|
        lv.cpus = settings['cpus']
        lv.memory = settings['memory']
        lv.machine_virtual_size = settings['libvirt']['machine']['virtual']['size']
        lv.management_network_name = settings['libvirt']['management']['network']['name']
        if settings['libvirt']['management']['network']['address']
            lv.management_network_address = settings['libvirt']['management']['network']['address']
        end
        if settings['libvirt']['management']['network']['mac']
            lv.management_network_mac = settings['libvirt']['management']['network']['mac']
        end
        if File.exist?(settings['clouddrive'])
            lv.storage :file, :device => :cdrom, :allow_existing => true, :path => settings['clouddrive']
        end
    end

    config.vm.provider "virtualbox" do |vb, override|
        vb.cpus = settings['cpus']
        vb.memory = settings['memory']
        override.vm.box_url = "http://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64-vagrant.box"
        if File.exist?(settings['clouddrive'])
            vb.customize [
                "storageattach", :id,
                "--storagectl", "SCSI Controller",
                "--port", "6",
                "--type", "dvddrive",
                "--medium", settings['clouddrive']
            ]
        end
        # see https://github.com/tomkins/cloud-init-vagrant/blob/master/Vagrantfile
        vb.customize [
            "modifyvm", :id,
            "--uartmode1", "disconnected"
        ]
    end

    config.vm.provision "shell", privileged:true, inline: <<-SHELL
        # wait for cloud-init to finish, also interferes with pkg installing 
        if which cloud-init > /dev/null; then 
            echo -n "waiting for cloud-init finish..."
            cloud-init status --wait
        fi        

        # set sensible defaults for language and timezone
        # set LANG, LANGUAGE, LC_MESSAGES and activate LC_ALL in environment
        export LC_ALL=#{ENV['LANG']}
        printf "LANG=#{ENV['LANG']}\nLANGUAGE=#{ENV['LANGUAGE']}\nLC_MESSAGES=#{ENV['LC_MESSAGES']}\n" > /etc/default/locale
        # set timezone to UTC
        timedatectl set-timezone "Etc/UTC"
        
        # install minimal needed packages
        export DEBIAN_FRONTEND=noninteractive
        apt-get -y update
        apt-get -y install software-properties-common locales git gosu curl rsync acpid
        
        # generate locales
        locale-gen en_US.UTF-8 && dpkg-reconfigure locales

        # set hostname
        if grep -qa container=lxc /proc/1/environ; then
            # XXX workaround for lxd, see: https://bugs.launchpad.net/ubuntu/+source/apparmor/+bug/1575779
            override_dir=/etc/systemd/system/systemd-hostnamed.service.d
            mkdir -p "$override_dir"
            echo -n "[Service]\nPrivateNetwork=no\n" > $override_dir/override.conf
            systemctl daemon-reload
            systemctl restart systemd-hostnamed
        fi
        hostname="#{settings['servername']}"
        shortname="${hostname%%.*}"
        domainname="${hostname#*.}"
        intip="127\.0\.1\.1"
        
        echo "INFO: set fqdn to $hostname"
        if ! grep -E -q "^${intip}[[:space:]]+${hostname}[[:space:]]+${shortname}" /etc/hosts; then
            grep -q "^${intip}" /etc/hosts && \
            sed --in-place=.bak -r "s/^(${intip}[ \t]+).*/\1${hostname} ${shortname}/" /etc/hosts || \
            sed --in-place=.bak -r "$ a${intip} ${hostname} ${shortname}" /etc/hosts
            echo "INFO: Modified /etc/hosts"
        fi
        hostnamectl set-hostname $shortname
        hostname -f || (echo "error $? on hostname -f"; exit 1)
        
    SHELL

    config.vm.provision "shell", privileged:true, inline: <<-SHELL
        echo "finish provision $(date)"
        
    SHELL

end
