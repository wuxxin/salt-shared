
{% load_yaml as defaults %}

# Container Runtime: ["runc","crun"]
# crun: alternative OCI runtime with support for cgroup V2
runtime: "crun"

storage:
  # Primary storage driver
  driver: "overlay"

  # Primary Read/Write location of container storage
  graphroot: "/var/lib/containers/storage"

  # Storage path for rootless users
  # rootless_storage_path : "$HOME/.local/share/containers/storage"

  # storage options
  options:
    overlay:
      mount_program: "/usr/bin/fuse-overlayfs"

# Global Mounts: The format of the mounts.conf is the volume format /SRC:/DEST,
# one mount per line. For example, a mounts.conf with the line
# - "/usr/share/secrets:/run/secrets"
# would cause the contents of the /usr/share/secrets directory on the host
# to be mounted on the /run/secrets directory inside the container.
# Setting mountpoints allows containers to use the files of the host.
mounts: []

# Policy: Manages which registries you trust as a source of container images based on its location.
# The location is determined by the transport and the registry host of the image.
# Using this container image docker://docker.io/library/busybox as an example,
#   docker is the transport and docker.io is the registry host.
policy: |
    { "default": [ { "type": "insecureAcceptAnything" } ],
      "transports": {
        "docker-daemon": { "": [{"type":"insecureAcceptAnything"}] }
      }
    }

{% endload %}

{% load_yaml as default_service %}
image:
  name: None
  tag: None
  build: None
  dockerfile: None
  insecure_registry: false

container:
  # name: container name, must be set
  name: None

  # update: if set true: container image will be pulled/build on start
  update: true
  # ephemeral: if set true, container will be removed on stop
  ephemeral: false

  # command: if set, will replace default command
  command: None
  # args: if set, will add args for command, command must also be set
  args: ""
  # env: dict: {key: value,}
  env: {}
  # label: dict: {key: value,}
  label: {}
  # volume: list: - [source-volume|host-dir:]container-dir[:options]
  volume: []
  # options: dict: {key: value,} container options parameter for podman run
  options: {}

{% endload %}

{%- set settings = salt['grains.filter_by']({'default': defaults},
  grain='default', default= 'default', merge= salt['pillar.get']('podman', {})) %}
