{% load_yaml as defaults %}
storage: /var/lib/machines
{% endload %}

{% load_yaml as machine_defaults %}
# name of the nspawn container and name of the controlling systemd service
name: ""

# enabled: if false, service will not get started and will be stopped if running
enabled: true

# volatile: can be "true, false", overlay, state"
# if "true" or "overlay", runs container with --volatile:overlay fs which is later discarded
volatile: false
# ephemeral: if set true, container is run with --ephemeral, wich creates a temporary snapshot before starting
ephemeral: false

# command: if set, will replace default command which is "--boot" instead of command
command: ""
# args: if set, will add args for command, if command is not set or "--boot" args are used as boot cmdline
args: ""

# environment: dict: {key: value,} add environment data
environment: {}

# user namespace mode, valid options are: "pick","true",""
"private-users": pick
"private-users-chown": true
# private network stack
"private-network": true

# systemctl set-property
properties: {}
#  MemoryLow:
#  MemoryHigh:
#  MemoryMax:
#  AllowedCPUs: 0-4

# bind mount files and directories into container
volumes: []
#  - volumename:/path/in/guest[:ro]
#  - /absolute/path:/path/in/guest[:ro]
#  - +/path/in/guest:/another/path/in/guest[:ro]

# define network interfaces available in container
networks: []
#  - type: [interface,macvlan,ipvlan,veth,bridge,zone]
#    name: ""
# ports: define port redirections: list: - "portnr:portnr"
ports: []

# options: dict: {key: value,} container options parameter for nspawn
options: {}

# systemd restart: "no", "on-failure" (default) or
# advanced: "on-success, on-abnormal, on-watchdog, on-abort, or always"
restart: ""
# after, requires, wants: equal to systemd config
after: ""
requires: ""
wants: ""

{% endload %}

{%- set settings = salt['grains.filter_by']({'default': defaults},
  grain='default', default= 'default', merge= salt['pillar.get']('nspawn', {})) %}
