[Unit]
Description={{ 'user' if user }} systemd service for podman container {{ entry.name }}
{%- if not user %}
After=network-online.target {{ entry.systemd.after }}
{%- else %}
{% if entry.systemd.after|length %}After={{ entry.systemd.after }}{% endif %}
{%- endif %}
{% if entry.systemd.wants|length %}Wants={{ entry.systemd.wants }}{% endif %}
{% if entry.systemd.requires|length %}Requires={{ entry.systemd.requires }}{% endif %}

{%- for k,v in entry.systemd.unit.items() %}
{{ k }}={{ v }}
{%- endfor %}

[Service]
Type={{ 'oneshot' if entry.type == 'oneshot' else 'exec' }}
{%- if not entry.systemd.restart|length %}
  {%- if entry.type == 'oneshot' %}
Restart=no
  {%- else %}
Restart=on-failure
  {%- endif %}
{%- else %}
Restart={{ entry.systemd.restart }}
{%- endif %}

# RuntimeDirectory will create /run/{{ entry.name }} for pid, socket files
RuntimeDirectory={{ entry.name }}
WorkingDirectory={{ entry.workdir }}

{%- if entry.refresh %}
  {%- if entry.build.source != '' %}
# build on start
ExecStartPre=/usr/bin/bash -c -- \
  'cd {{ entry.builddir }} && \
  podman build {{ '--tag='+ entry.tag if entry.tag }} \
  {%- for key,value in entry.build.args.items() %}
  {{ '--build-arg=' ~ key ~ '=' ~ value }} \
  {%- endfor %}
  {{ entry.build.source }}'

  {%- else %}
# pull on start
ExecStartPre=/usr/bin/bash -c -- \
  'registry="{{ entry.image }}"; \
  if test "${registry%*/}" != "localhost"; then \
    podman pull {{ entry.image }}{{ ":"+ entry.tag if entry.tag }}; \
  fi'
  {%- endif %}
{%- endif %}

{%- if entry.ephemeral %}
# remove existing container before start
ExecStartPre=-podman rm -f {{ entry.name }}
{%- endif %}

# commands run before the first time the service is started
ExecStartPre=/usr/bin/bash -c -- \
  'if test ! -e "{{ entry.configdir }}/image.digest"; then \
      echo "INFO: initial run"; \
  {%- if entry.init.command != '' %}
      /usr/bin/env - \
        {% for k,v in entry.init.environment -%}{{ k }}={{ v }} {% endfor %} \
        {{ entry.init.command }}; \
  {%- endif %}
  fi'

# create a digest if none is existing
ExecStartPre=/usr/bin/bash -c -- \
  'if test ! -e "{{ entry.configdir }}/image.digest"; then \
      podman image list --format json {{ entry.image }}{{ ":"+ entry.tag if entry.tag }} | \
        jq ".[0].Digest" -r > "{{ entry.configdir }}/image.digest"; \
  fi'

# commands run after updating image to newer image before starting new image
ExecStartPre=/usr/bin/bash -c -- \
  'if test "$(cat "{{ entry.configdir }}/image.digest")" != \
      "$(podman image list --format json \
        {{ entry.image }}{{ ":"+ entry.tag if entry.tag }} | jq -r ".[0].Digest")"; then \
      echo "INFO: update run"; \
  {%- if entry.change.command != '' %}
      /usr/bin/env - \
    {% for k,v in entry.change.environment -%}{{ k }}={{ v }} {% endfor %} \
        {{ entry.change.command }}; \
  {%- endif %}
  fi'

# update digest
ExecStartPre=/usr/bin/bash -c -- \
  'podman image list --format json {{ entry.image }}{{ ":"+ entry.tag if entry.tag }} | \
    jq -r ".[0].Digest" > "{{ entry.configdir }}/image.digest"'

# start container
ExecStart=podman run \
  --name={{ entry.name }} \
  --cgroups=split \
  --env-file {{ entry.configdir }}/.env \
  --env-host \
{%- if entry.userns == 'pick' or (entry.userns == 'auto' and user) %}
  --uidmap=0:{{ entry.USERNS_ID }}:65536 \
  --gidmap=0:{{ entry.USERNS_ID }}:65536 \
{%- else %}
  --userns={{ entry.userns }} \
{%- endif %}
{%- for key,value in entry.labels.items() %}
  --label={{ key }}={{ value }} \
{%- endfor %}
{%- for vol in entry.volumes %}
  --volume={{ vol }} \
{%- endfor %}
{%- for publish in entry.ports %}
  --publish={{ publish }} \
{%- endfor %}
{%- for opt in entry.options %}
  {{ opt }} \
{%- endfor %}
  {{ entry.image }}{{ ":"~ entry.tag if entry.tag }} {% if entry.command %} \
  {{ entry.command }} {{ entry.args }}
{% endif %}



{%- if entry.type == 'service' %}
# stop container
ExecStop=podman stop {{ entry.name }}
{%- endif %}

{%- for k,v in entry.systemd.service.items() %}
{{ k }}={{ v }}
{%- endfor %}

{%- if entry.type == 'service' %}

[Install]
  {%- if not user %}
WantedBy=multi-user.target
  {%- else %}
WantedBy=default.target
  {%- endif %}
{%- endif %}
