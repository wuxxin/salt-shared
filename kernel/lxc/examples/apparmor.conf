#include <tunables/global>

profile "<%= name %>" flags=(attach_disconnected,mediate_deleted) {
  capability,
  dbus,
  file,
  network,
  umount,

  # Allow us to receive signals from anywhere
  signal (receive),

  # Allow us to send signals to ourselves
  signal peer=@{profile_name},

  # Allow other processes to read our /proc entries, futexes, perf tracing and
  # kcmp for now (they will need 'read' in the first place). Administrators can
  # override with:
  #   deny ptrace (readby) ...
  ptrace (readby),

  # Allow other processes to trace us by default (they will need 'trace' in
  # the first place). Administrators can override with:
  #   deny ptrace (tracedby) ...
  ptrace (tracedby),

  # Allow us to ptrace ourselves
  ptrace peer=@{profile_name},

  # Allow receive via unix sockets from anywhere. Note: if per-container
  # profiles are supported, for container isolation this should be changed to
  # something like:
  #   unix (receive) peer=(label=unconfined),
  unix (receive),

  # Allow all unix in the container
  unix peer=(label=@{profile_name}),

  # ignore DENIED message on / remount
  deny mount options=(ro, remount) -> /,
  deny mount options=(ro, remount, silent) -> /,

  # allow tmpfs mounts everywhere
  mount fstype=tmpfs,

  # allow hugetlbfs mounts everywhere
  mount fstype=hugetlbfs,

  # allow mqueue mounts everywhere
  mount fstype=mqueue,

  # allow fuse mounts everywhere
  mount fstype=fuse,
  mount fstype=fuse.*,

  # allow binfmt_misc to be mounted
  mount fstype=binfmt_misc,

  # allow fusectl, securityfs and debugfs to be mounted
  mount fstype=fusectl,
  mount fstype=securityfs,
  mount fstype=debugfs,
  deny mount fstype=debugfs -> /var/lib/ureadahead/debugfs/,
  mount fstype=proc,
  mount fstype=sysfs,

  # Allow switching AppArmor to namespaced profiles
  change_profile -> ":<%= namespace %>:*",
  change_profile -> ":<%= namespace %>://*",

  # Allow moving mounts
  mount options=(rw,move),
  mount options=(ro,move),

  # Allow modifying mount propagation
  mount options=(rw,make-slave) -> **,
  mount options=(rw,make-rslave) -> **,
  mount options=(rw,make-shared) -> **,
  mount options=(rw,make-rshared) -> **,
  mount options=(rw,make-private) -> **,
  mount options=(rw,make-rprivate) -> **,
  mount options=(rw,make-unbindable) -> **,
  mount options=(rw,make-runbindable) -> **,

  # Allow all bind-mounts
  mount options=(rw,bind),
  mount options=(rw,rbind),

  # Allow remounting things
  mount options=(ro,remount),
  mount options=(ro,bind,remount),
  mount options=(ro,rbind,remount),
  mount options=(rw,bind,remount),
  mount options=(rw,rbind,remount),

<% %w(ro rw).each do |mode| -%>
<% %w(bind rbind).each do |bind| -%>
<% %w(strictatime relatime noatime).each do |time| -%>
  mount options=(<%= mode %>,<%= bind %>,<%= time %>,remount),
<% end -%>
<% all_combinations_of(%w(nodev noexec nosuid silent)).each do |v| -%>
  mount options=(<%= mode %>,<%= bind %>,<%= v.join(',') %>,remount),
<% %w(strictatime relatime noatime).each do |time| -%>
  mount options=(<%= mode %>,<%= bind %>,<%= v.join(',') %>,<%= time %>,remount),
<% end -%>
<% end -%>
<% end -%>
<% end -%>

<% %w(ro rw).each do |mode| -%>
<% %w(strictatime relatime noatime).each do |time| -%>
  mount options=(<%= mode %>,<%= time %>,remount),
<% end -%>
<% all_combinations_of(%w(nodev noexec nosuid silent)).each do |v| -%>
  mount options=(<%= mode %>,<%= v.join(',') %>,remount),
<% %w(strictatime relatime noatime).each do |time| -%>
  mount options=(<%= mode %>,<%= v.join(',') %>,<%= time %>,remount),
<% end -%>
<% end -%>
<% end -%>

  # Allow cgroup mounts
  mount fstype=cgroup,
  mount fstype=cgroup2,

  pivot_root,

  <% if ct.nesting %>#include <osctl/features/nesting><% end %>
}
